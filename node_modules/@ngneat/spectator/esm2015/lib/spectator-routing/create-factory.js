import { NgZone } from '@angular/core';
import { async, TestBed } from '@angular/core/testing';
import { ActivatedRoute, Router } from '@angular/router';
import { setProps } from '../internals/query';
import * as customMatchers from '../matchers';
import { overrideComponentIfProviderOverridesSpecified, overrideModules } from '../spectator/create-factory';
import { addMatchers } from '../core';
import { isType } from '../types';
import { ActivatedRouteStub } from './activated-route-stub';
import { initialRoutingModule } from './initial-module';
import { getRoutingDefaultOptions } from './options';
import { SpectatorRouting } from './spectator-routing';
/**
 * @publicApi
 */
export function createRoutingFactory(typeOrOptions) {
    const options = isType(typeOrOptions)
        ? getRoutingDefaultOptions({ component: typeOrOptions })
        : getRoutingDefaultOptions(typeOrOptions);
    const moduleMetadata = initialRoutingModule(options);
    beforeEach(async(() => {
        addMatchers(customMatchers);
        TestBed.configureTestingModule(moduleMetadata);
        overrideModules(options);
        overrideComponentIfProviderOverridesSpecified(options);
        TestBed.compileComponents();
    }));
    return (overrides) => {
        const defaults = {
            props: {},
            detectChanges: true,
            providers: []
        };
        const { detectChanges, props, providers } = Object.assign(Object.assign({}, defaults), overrides);
        if (providers && providers.length) {
            providers.forEach((provider) => {
                TestBed.overrideProvider(provider.provide, provider);
            });
        }
        const { params, queryParams, data, fragment, url, root, parent, children, firstChild } = Object.assign(Object.assign({}, options), overrides);
        TestBed.overrideProvider(ActivatedRoute, {
            useValue: new ActivatedRouteStub({ params, queryParams, data, fragment, url, root, parent, children, firstChild })
        });
        const ngZone = TestBed.inject ? TestBed.inject(NgZone) : TestBed.get(NgZone);
        return ngZone.run(() => {
            const spectator = createSpectatorRouting(options, props);
            spectator.router.initialNavigation();
            if (options.detectChanges && detectChanges) {
                spectator.detectChanges();
            }
            return spectator;
        });
    };
}
function createSpectatorRouting(options, props) {
    const fixture = TestBed.createComponent(options.component);
    const debugElement = fixture.debugElement;
    const component = setProps(fixture.componentInstance, props);
    /**
     * Back compatibility, angular under 9 version doesnt have a inject function
     */
    if (!TestBed.inject) {
        return new SpectatorRouting(fixture, debugElement, component, TestBed.get(Router), TestBed.get(ActivatedRoute));
    }
    return new SpectatorRouting(fixture, debugElement, component, TestBed.inject(Router), TestBed.inject(ActivatedRoute));
}
//# sourceMappingURL=data:application/json;base64,