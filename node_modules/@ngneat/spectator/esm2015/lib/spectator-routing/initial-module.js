import { ActivatedRoute, Router } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { Subject } from 'rxjs';
import { initialSpectatorModule } from '../spectator/initial-module';
import { ActivatedRouteStub } from './activated-route-stub';
import { RouterLinkDirectiveStub } from './router-link-stub';
import { RouterStub } from './router-stub';
/**
 * @internal
 */
export function initialRoutingModule(options) {
    const moduleMetadata = initialSpectatorModule(options);
    if (options.mockRouterLinks && options.stubsEnabled) {
        moduleMetadata.declarations.push(RouterLinkDirectiveStub);
    }
    if (options.stubsEnabled) {
        moduleMetadata.providers.push(options.mockProvider(RouterStub, {
            events: new Subject(),
            emitRouterEvent(event) {
                this.events.next(event);
            }
        }), {
            provide: Router,
            useExisting: RouterStub
        });
        moduleMetadata.providers.push({
            provide: ActivatedRouteStub,
            useValue: new ActivatedRouteStub({
                params: options.params,
                queryParams: options.queryParams,
                data: options.data
            })
        }, {
            provide: ActivatedRoute,
            useExisting: ActivatedRouteStub
        });
    }
    else {
        moduleMetadata.imports.push(RouterTestingModule.withRoutes(options.routes));
    }
    return moduleMetadata;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdGlhbC1tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL25ldGFuZWxiYXNhbC93d3cvc3BlY3RhdG9yL3Byb2plY3RzL3NwZWN0YXRvci9zcmMvIiwic291cmNlcyI6WyJsaWIvc3BlY3RhdG9yLXJvdXRpbmcvaW5pdGlhbC1tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBUyxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRy9CLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXJFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTVELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzdELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0M7O0dBRUc7QUFDSCxNQUFNLFVBQVUsb0JBQW9CLENBQUksT0FBNkM7SUFDbkYsTUFBTSxjQUFjLEdBQUcsc0JBQXNCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFdkQsSUFBSSxPQUFPLENBQUMsZUFBZSxJQUFJLE9BQU8sQ0FBQyxZQUFZLEVBQUU7UUFDbkQsY0FBYyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQztLQUMzRDtJQUVELElBQUksT0FBTyxDQUFDLFlBQVksRUFBRTtRQUN4QixjQUFjLENBQUMsU0FBUyxDQUFDLElBQUksQ0FDM0IsT0FBTyxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUU7WUFDL0IsTUFBTSxFQUFFLElBQUksT0FBTyxFQUFTO1lBQzVCLGVBQWUsQ0FBQyxLQUFZO2dCQUMxQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMxQixDQUFDO1NBQ0YsQ0FBQyxFQUNGO1lBQ0UsT0FBTyxFQUFFLE1BQU07WUFDZixXQUFXLEVBQUUsVUFBVTtTQUN4QixDQUNGLENBQUM7UUFFRixjQUFjLENBQUMsU0FBUyxDQUFDLElBQUksQ0FDM0I7WUFDRSxPQUFPLEVBQUUsa0JBQWtCO1lBQzNCLFFBQVEsRUFBRSxJQUFJLGtCQUFrQixDQUFDO2dCQUMvQixNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU07Z0JBQ3RCLFdBQVcsRUFBRSxPQUFPLENBQUMsV0FBVztnQkFDaEMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO2FBQ25CLENBQUM7U0FDSCxFQUNEO1lBQ0UsT0FBTyxFQUFFLGNBQWM7WUFDdkIsV0FBVyxFQUFFLGtCQUFrQjtTQUNoQyxDQUNGLENBQUM7S0FDSDtTQUFNO1FBQ0wsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0tBQzdFO0lBRUQsT0FBTyxjQUFjLENBQUM7QUFDeEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGl2YXRlZFJvdXRlLCBFdmVudCwgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IFJvdXRlclRlc3RpbmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXIvdGVzdGluZyc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IE1vZHVsZU1ldGFkYXRhIH0gZnJvbSAnLi4vYmFzZS9pbml0aWFsLW1vZHVsZSc7XG5pbXBvcnQgeyBpbml0aWFsU3BlY3RhdG9yTW9kdWxlIH0gZnJvbSAnLi4vc3BlY3RhdG9yL2luaXRpYWwtbW9kdWxlJztcblxuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVTdHViIH0gZnJvbSAnLi9hY3RpdmF0ZWQtcm91dGUtc3R1Yic7XG5pbXBvcnQgeyBTcGVjdGF0b3JSb3V0aW5nT3B0aW9ucyB9IGZyb20gJy4vb3B0aW9ucyc7XG5pbXBvcnQgeyBSb3V0ZXJMaW5rRGlyZWN0aXZlU3R1YiB9IGZyb20gJy4vcm91dGVyLWxpbmstc3R1Yic7XG5pbXBvcnQgeyBSb3V0ZXJTdHViIH0gZnJvbSAnLi9yb3V0ZXItc3R1Yic7XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsUm91dGluZ01vZHVsZTxTPihvcHRpb25zOiBSZXF1aXJlZDxTcGVjdGF0b3JSb3V0aW5nT3B0aW9uczxTPj4pOiBNb2R1bGVNZXRhZGF0YSB7XG4gIGNvbnN0IG1vZHVsZU1ldGFkYXRhID0gaW5pdGlhbFNwZWN0YXRvck1vZHVsZShvcHRpb25zKTtcblxuICBpZiAob3B0aW9ucy5tb2NrUm91dGVyTGlua3MgJiYgb3B0aW9ucy5zdHVic0VuYWJsZWQpIHtcbiAgICBtb2R1bGVNZXRhZGF0YS5kZWNsYXJhdGlvbnMucHVzaChSb3V0ZXJMaW5rRGlyZWN0aXZlU3R1Yik7XG4gIH1cblxuICBpZiAob3B0aW9ucy5zdHVic0VuYWJsZWQpIHtcbiAgICBtb2R1bGVNZXRhZGF0YS5wcm92aWRlcnMucHVzaChcbiAgICAgIG9wdGlvbnMubW9ja1Byb3ZpZGVyKFJvdXRlclN0dWIsIHtcbiAgICAgICAgZXZlbnRzOiBuZXcgU3ViamVjdDxFdmVudD4oKSxcbiAgICAgICAgZW1pdFJvdXRlckV2ZW50KGV2ZW50OiBFdmVudCk6IHZvaWQge1xuICAgICAgICAgIHRoaXMuZXZlbnRzLm5leHQoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIHtcbiAgICAgICAgcHJvdmlkZTogUm91dGVyLFxuICAgICAgICB1c2VFeGlzdGluZzogUm91dGVyU3R1YlxuICAgICAgfVxuICAgICk7XG5cbiAgICBtb2R1bGVNZXRhZGF0YS5wcm92aWRlcnMucHVzaChcbiAgICAgIHtcbiAgICAgICAgcHJvdmlkZTogQWN0aXZhdGVkUm91dGVTdHViLFxuICAgICAgICB1c2VWYWx1ZTogbmV3IEFjdGl2YXRlZFJvdXRlU3R1Yih7XG4gICAgICAgICAgcGFyYW1zOiBvcHRpb25zLnBhcmFtcyxcbiAgICAgICAgICBxdWVyeVBhcmFtczogb3B0aW9ucy5xdWVyeVBhcmFtcyxcbiAgICAgICAgICBkYXRhOiBvcHRpb25zLmRhdGFcbiAgICAgICAgfSlcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHByb3ZpZGU6IEFjdGl2YXRlZFJvdXRlLFxuICAgICAgICB1c2VFeGlzdGluZzogQWN0aXZhdGVkUm91dGVTdHViXG4gICAgICB9XG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGVNZXRhZGF0YS5pbXBvcnRzLnB1c2goUm91dGVyVGVzdGluZ01vZHVsZS53aXRoUm91dGVzKG9wdGlvbnMucm91dGVzKSk7XG4gIH1cblxuICByZXR1cm4gbW9kdWxlTWV0YWRhdGE7XG59XG4iXX0=