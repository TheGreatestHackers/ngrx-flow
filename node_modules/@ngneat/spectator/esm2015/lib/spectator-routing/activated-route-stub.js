import { convertToParamMap, ActivatedRoute, ActivatedRouteSnapshot } from '@angular/router';
import { ReplaySubject } from 'rxjs';
import { map } from 'rxjs/operators';
/**
 * @publicApi
 *
 * Utility class for stubbing ActivatedRoute of @angular/router
 */
export class ActivatedRouteStub extends ActivatedRoute {
    constructor(options) {
        super();
        this.testParams = {};
        this.testQueryParams = {};
        this.testData = {};
        this.testFragment = null;
        this.testUrl = [];
        this.testRoot = null;
        this.testParent = null;
        this.testFirstChild = null;
        this.testChildren = null;
        this.paramsSubject = new ReplaySubject(1);
        this.queryParamsSubject = new ReplaySubject(1);
        this.dataSubject = new ReplaySubject(1);
        this.fragmentSubject = new ReplaySubject(1);
        this.urlSubject = new ReplaySubject(1);
        if (options) {
            this.testParams = options.params || {};
            this.testQueryParams = options.queryParams || {};
            this.testData = options.data || {};
            this.testFragment = options.fragment || null;
            this.testUrl = options.url || [];
            this.testRoot = options.root || null;
            this.testParent = options.parent || null;
            this.testFirstChild = options.firstChild || null;
            this.testChildren = options.children || null;
        }
        this.params = this.paramsSubject.asObservable();
        this.queryParams = this.queryParamsSubject.asObservable();
        this.data = this.dataSubject.asObservable();
        this.fragment = this.fragmentSubject.asObservable();
        this.url = this.urlSubject.asObservable();
        this.snapshot = this.buildSnapshot();
        this.triggerNavigation();
    }
    get paramMap() {
        return this.paramsSubject.asObservable().pipe(map(params => convertToParamMap(params)));
    }
    setParams(params) {
        this.testParams = params;
        this.snapshot = this.buildSnapshot();
    }
    setParam(name, value) {
        this.testParams = Object.assign(Object.assign({}, this.testParams), { [name]: value });
        this.snapshot = this.buildSnapshot();
    }
    setQueryParams(queryParams) {
        this.testQueryParams = queryParams;
        this.snapshot = this.buildSnapshot();
    }
    setQueryParam(name, value) {
        this.testQueryParams = Object.assign(Object.assign({}, this.testQueryParams), { [name]: value });
        this.snapshot = this.buildSnapshot();
    }
    setAllData(data) {
        this.testData = data;
        this.snapshot = this.buildSnapshot();
    }
    setData(name, value) {
        this.testData = Object.assign(Object.assign({}, this.testData), { [name]: value });
        this.snapshot = this.buildSnapshot();
    }
    setFragment(fragment) {
        this.testFragment = fragment;
        this.snapshot = this.buildSnapshot();
    }
    setUrl(url) {
        this.testUrl = url;
        this.snapshot = this.buildSnapshot();
    }
    get root() {
        return this.testRoot || this;
    }
    get parent() {
        return this.testParent || null;
    }
    get children() {
        return this.testChildren || [this];
    }
    get firstChild() {
        return this.testFirstChild || null;
    }
    /**
     * Simulates a route navigation by updating the Params, QueryParams and Data observable streams.
     */
    triggerNavigation() {
        this.paramsSubject.next(this.testParams);
        this.queryParamsSubject.next(this.testQueryParams);
        this.dataSubject.next(this.testData);
        this.fragmentSubject.next(this.testFragment);
        this.urlSubject.next(this.testUrl);
    }
    toString() {
        return 'activatedRouteStub';
    }
    buildSnapshot() {
        const snapshot = new ActivatedRouteSnapshot();
        snapshot.params = this.testParams;
        snapshot.queryParams = this.testQueryParams;
        snapshot.data = this.testData;
        snapshot.fragment = this.testFragment;
        snapshot.url = this.testUrl;
        return snapshot;
    }
}
//# sourceMappingURL=data:application/json;base64,