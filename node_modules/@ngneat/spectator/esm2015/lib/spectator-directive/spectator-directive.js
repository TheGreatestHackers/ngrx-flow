import { setProps } from '../internals/query';
import { DomSpectator } from '../base/dom-spectator';
/**
 * @publicApi
 */
export class SpectatorDirective extends DomSpectator {
    constructor(hostComponent, fixture, debugElement, instance, element) {
        super(fixture, debugElement, instance, element);
        this.hostComponent = hostComponent;
        this.fixture = fixture;
        this.debugElement = debugElement;
        this.instance = instance;
        this.element = element;
    }
    get directive() {
        return this.instance;
    }
    inject(token, fromDirectiveInjector = false) {
        if (fromDirectiveInjector) {
            return this.debugElement.injector.get(token);
        }
        return super.inject(token);
    }
    setHostInput(input, value) {
        setProps(this.hostComponent, input, value, false);
        this.detectChanges();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlY3RhdG9yLWRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbmV0YW5lbGJhc2FsL3d3dy9zcGVjdGF0b3IvcHJvamVjdHMvc3BlY3RhdG9yL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9zcGVjdGF0b3ItZGlyZWN0aXZlL3NwZWN0YXRvci1kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTlDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUlyRDs7R0FFRztBQUNILE1BQU0sT0FBTyxrQkFBeUMsU0FBUSxZQUFlO0lBQzNFLFlBQ1MsYUFBZ0IsRUFDaEIsT0FBOEIsRUFDOUIsWUFBMEIsRUFDdkIsUUFBVyxFQUNkLE9BQWdCO1FBRXZCLEtBQUssQ0FBQyxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQU56QyxrQkFBYSxHQUFiLGFBQWEsQ0FBRztRQUNoQixZQUFPLEdBQVAsT0FBTyxDQUF1QjtRQUM5QixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUN2QixhQUFRLEdBQVIsUUFBUSxDQUFHO1FBQ2QsWUFBTyxHQUFQLE9BQU8sQ0FBUztJQUd6QixDQUFDO0lBRUQsSUFBVyxTQUFTO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRU0sTUFBTSxDQUFJLEtBQWUsRUFBRSx3QkFBaUMsS0FBSztRQUN0RSxJQUFJLHFCQUFxQixFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBaUIsQ0FBQztTQUM5RDtRQUVELE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBSU0sWUFBWSxDQUFDLEtBQVUsRUFBRSxLQUFXO1FBQ3pDLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlYnVnRWxlbWVudCwgSW5qZWN0aW9uVG9rZW4sIFR5cGUsIEFic3RyYWN0VHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcG9uZW50Rml4dHVyZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5cbmltcG9ydCB7IHNldFByb3BzIH0gZnJvbSAnLi4vaW50ZXJuYWxzL3F1ZXJ5JztcbmltcG9ydCB7IFRva2VuIH0gZnJvbSAnLi4vdG9rZW4nO1xuaW1wb3J0IHsgRG9tU3BlY3RhdG9yIH0gZnJvbSAnLi4vYmFzZS9kb20tc3BlY3RhdG9yJztcbmltcG9ydCB7IFNweU9iamVjdCB9IGZyb20gJy4uL21vY2snO1xuaW1wb3J0IHsgSG9zdENvbXBvbmVudCB9IGZyb20gJy4uL3NwZWN0YXRvci1ob3N0L2hvc3QtY29tcG9uZW50JztcblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBjbGFzcyBTcGVjdGF0b3JEaXJlY3RpdmU8RCwgSCA9IEhvc3RDb21wb25lbnQ+IGV4dGVuZHMgRG9tU3BlY3RhdG9yPEQ+IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGhvc3RDb21wb25lbnQ6IEgsXG4gICAgcHVibGljIGZpeHR1cmU6IENvbXBvbmVudEZpeHR1cmU8YW55PixcbiAgICBwdWJsaWMgZGVidWdFbGVtZW50OiBEZWJ1Z0VsZW1lbnQsXG4gICAgcHJvdGVjdGVkIGluc3RhbmNlOiBELFxuICAgIHB1YmxpYyBlbGVtZW50OiBFbGVtZW50XG4gICkge1xuICAgIHN1cGVyKGZpeHR1cmUsIGRlYnVnRWxlbWVudCwgaW5zdGFuY2UsIGVsZW1lbnQpO1xuICB9XG5cbiAgcHVibGljIGdldCBkaXJlY3RpdmUoKTogRCB7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gIH1cblxuICBwdWJsaWMgaW5qZWN0PFQ+KHRva2VuOiBUb2tlbjxUPiwgZnJvbURpcmVjdGl2ZUluamVjdG9yOiBib29sZWFuID0gZmFsc2UpOiBTcHlPYmplY3Q8VD4ge1xuICAgIGlmIChmcm9tRGlyZWN0aXZlSW5qZWN0b3IpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlYnVnRWxlbWVudC5pbmplY3Rvci5nZXQodG9rZW4pIGFzIFNweU9iamVjdDxUPjtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VwZXIuaW5qZWN0KHRva2VuKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRIb3N0SW5wdXQ8SyBleHRlbmRzIGtleW9mIEg+KGlucHV0OiBQYXJ0aWFsPEg+KTogdm9pZDtcbiAgcHVibGljIHNldEhvc3RJbnB1dDxLIGV4dGVuZHMga2V5b2YgSD4oaW5wdXQ6IEssIGlucHV0VmFsdWU6IEhbS10pOiB2b2lkO1xuICBwdWJsaWMgc2V0SG9zdElucHV0KGlucHV0OiBhbnksIHZhbHVlPzogYW55KTogdm9pZCB7XG4gICAgc2V0UHJvcHModGhpcy5ob3N0Q29tcG9uZW50LCBpbnB1dCwgdmFsdWUsIGZhbHNlKTtcbiAgICB0aGlzLmRldGVjdENoYW5nZXMoKTtcbiAgfVxufVxuIl19