import { async, TestBed } from '@angular/core/testing';
import { By } from '@angular/platform-browser';
import { BrowserDynamicTestingModule } from '@angular/platform-browser-dynamic/testing';
import { setProps } from '../internals/query';
import * as customMatchers from '../matchers';
import { addMatchers } from '../core';
import { isType } from '../types';
import { nodeByDirective } from '../internals/node-by-directive';
import { initialSpectatorDirectiveModule } from './initial-module';
import { getSpectatorDirectiveDefaultOptions } from './options';
import { SpectatorDirective } from './spectator-directive';
import { overrideModules } from '../spectator/create-factory';
export function createDirectiveFactory(typeOrOptions) {
    const options = isType(typeOrOptions)
        ? getSpectatorDirectiveDefaultOptions({ directive: typeOrOptions })
        : getSpectatorDirectiveDefaultOptions(typeOrOptions);
    const moduleMetadata = initialSpectatorDirectiveModule(options);
    beforeEach(async(() => {
        addMatchers(customMatchers);
        TestBed.configureTestingModule(moduleMetadata);
        overrideModules(options);
    }));
    return (template, overrides) => {
        const defaults = {
            props: {},
            hostProps: {},
            detectChanges: true,
            providers: []
        };
        const { detectChanges, props, hostProps, providers } = Object.assign(Object.assign({}, defaults), overrides);
        if (providers && providers.length) {
            providers.forEach((provider) => {
                TestBed.overrideProvider(provider.provide, provider);
            });
        }
        TestBed.overrideModule(BrowserDynamicTestingModule, {
            set: {
                entryComponents: moduleMetadata.entryComponents
            }
        }).overrideComponent(options.host, {
            set: { template: template || options.template }
        });
        if (options.directiveProviders.length || options.directiveMocks.length) {
            TestBed.overrideDirective(options.directive, {
                set: { providers: [...options.directiveProviders, ...options.directiveMocks.map(p => options.mockProvider(p))] }
            });
        }
        const spectator = createSpectatorDirective(options, props, hostProps);
        if (options.detectChanges && detectChanges) {
            spectator.detectChanges();
        }
        return spectator;
    };
}
function createSpectatorDirective(options, props, hostProps) {
    const hostFixture = TestBed.createComponent(options.host);
    const debugElement = hostFixture.debugElement.query(By.directive(options.directive)) || hostFixture.debugElement;
    const debugNode = hostFixture.debugElement.queryAllNodes(nodeByDirective(options.directive))[0];
    if (!debugNode) {
        throw new Error(`Cannot find directive ${options.directive} in host template ðŸ˜”`);
    }
    const hostComponent = setProps(hostFixture.componentInstance, hostProps);
    const directive = setProps(debugNode.injector.get(options.directive), props);
    return new SpectatorDirective(hostComponent, hostFixture, hostFixture.debugElement, directive, debugElement.nativeElement);
}
//# sourceMappingURL=data:application/json;base64,