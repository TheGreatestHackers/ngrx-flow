import { dispatchFakeEvent } from './dispatch-events';
import { isString, isHTMLOptionElementArray } from './types';
/**
 * Focuses a select element, selects the correct options and dispatches
 * the `change` event, simulating the user selecting an option
 * @param options Options to be selected.
 * @param element Element onto which to select the options.
 * @param config Object with extra config to dispatch change event when option selected
 *
 * selectOption('al' | ['al', 'ab'], select, config);
 */
export function selectOption(options, element, config) {
    if (!(element instanceof HTMLSelectElement)) {
        return;
    }
    element.focus();
    if (isString(options)) {
        const option = element.querySelector(`option[value="${options}"]`);
        if (!option) {
            return;
        }
        setOptionSelected(option, element, config);
    }
    else if (options instanceof HTMLOptionElement) {
        setOptionSelected(options, element, config);
    }
    else {
        if (!element.multiple) {
            return;
        }
        if (isHTMLOptionElementArray(options)) {
            options.forEach(option => setOptionSelected(option, element, config));
        }
        else {
            element.querySelectorAll('option').forEach(opt => {
                if (options.includes(opt.value)) {
                    setOptionSelected(opt, element, config);
                }
            });
        }
    }
}
/**
 * Set the option in the HTMLSelectElement to selected
 * @param option HTMLOptionElement to select
 * @param select HTMLSelectElement to add the options to
 * @param config Object with extra config to dispatch change event when option selected
 *
 * setOptionSelected(option, element, config);
 */
function setOptionSelected(option, select, config) {
    option.selected = true;
    if (config.emitEvents) {
        dispatchFakeEvent(select, 'change', true);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LW9wdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbmV0YW5lbGJhc2FsL3d3dy9zcGVjdGF0b3IvcHJvamVjdHMvc3BlY3RhdG9yL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9zZWxlY3Qtb3B0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxRQUFRLEVBQUUsd0JBQXdCLEVBQWlCLE1BQU0sU0FBUyxDQUFDO0FBRTVFOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxVQUFVLFlBQVksQ0FDMUIsT0FBc0IsRUFDdEIsT0FBNEQsRUFDNUQsTUFBK0I7SUFFL0IsSUFBSSxDQUFDLENBQUMsT0FBTyxZQUFZLGlCQUFpQixDQUFDLEVBQUU7UUFDM0MsT0FBTztLQUNSO0lBRUQsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBRWhCLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ3JCLE1BQU0sTUFBTSxHQUE2QixPQUFPLENBQUMsYUFBYSxDQUFDLGlCQUFpQixPQUFPLElBQUksQ0FBQyxDQUFDO1FBQzdGLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxPQUFPO1NBQ1I7UUFFRCxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQzVDO1NBQU0sSUFBSSxPQUFPLFlBQVksaUJBQWlCLEVBQUU7UUFDL0MsaUJBQWlCLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztLQUM3QztTQUFNO1FBQ0wsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUU7WUFDckIsT0FBTztTQUNSO1FBRUQsSUFBSSx3QkFBd0IsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNyQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQ3ZFO2FBQU07WUFDTCxPQUFPLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUMvQyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUMvQixpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2lCQUN6QztZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7S0FDRjtBQUNILENBQUM7QUFFRDs7Ozs7OztHQU9HO0FBQ0gsU0FBUyxpQkFBaUIsQ0FBQyxNQUF5QixFQUFFLE1BQXlCLEVBQUUsTUFBK0I7SUFDOUcsTUFBTSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFDdkIsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO1FBQ3JCLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDM0M7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGlzcGF0Y2hGYWtlRXZlbnQgfSBmcm9tICcuL2Rpc3BhdGNoLWV2ZW50cyc7XG5pbXBvcnQgeyBpc1N0cmluZywgaXNIVE1MT3B0aW9uRWxlbWVudEFycmF5LCBTZWxlY3RPcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogRm9jdXNlcyBhIHNlbGVjdCBlbGVtZW50LCBzZWxlY3RzIHRoZSBjb3JyZWN0IG9wdGlvbnMgYW5kIGRpc3BhdGNoZXNcbiAqIHRoZSBgY2hhbmdlYCBldmVudCwgc2ltdWxhdGluZyB0aGUgdXNlciBzZWxlY3RpbmcgYW4gb3B0aW9uXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIHRvIGJlIHNlbGVjdGVkLlxuICogQHBhcmFtIGVsZW1lbnQgRWxlbWVudCBvbnRvIHdoaWNoIHRvIHNlbGVjdCB0aGUgb3B0aW9ucy5cbiAqIEBwYXJhbSBjb25maWcgT2JqZWN0IHdpdGggZXh0cmEgY29uZmlnIHRvIGRpc3BhdGNoIGNoYW5nZSBldmVudCB3aGVuIG9wdGlvbiBzZWxlY3RlZFxuICpcbiAqIHNlbGVjdE9wdGlvbignYWwnIHwgWydhbCcsICdhYiddLCBzZWxlY3QsIGNvbmZpZyk7XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RPcHRpb24oXG4gIG9wdGlvbnM6IFNlbGVjdE9wdGlvbnMsXG4gIGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgSFRNTFNlbGVjdEVsZW1lbnQgfCBEb2N1bWVudCB8IFdpbmRvdyxcbiAgY29uZmlnOiB7IGVtaXRFdmVudHM6IGJvb2xlYW4gfVxuKTogdm9pZCB7XG4gIGlmICghKGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MU2VsZWN0RWxlbWVudCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBlbGVtZW50LmZvY3VzKCk7XG5cbiAgaWYgKGlzU3RyaW5nKG9wdGlvbnMpKSB7XG4gICAgY29uc3Qgb3B0aW9uOiBIVE1MT3B0aW9uRWxlbWVudCB8IG51bGwgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYG9wdGlvblt2YWx1ZT1cIiR7b3B0aW9uc31cIl1gKTtcbiAgICBpZiAoIW9wdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNldE9wdGlvblNlbGVjdGVkKG9wdGlvbiwgZWxlbWVudCwgY29uZmlnKTtcbiAgfSBlbHNlIGlmIChvcHRpb25zIGluc3RhbmNlb2YgSFRNTE9wdGlvbkVsZW1lbnQpIHtcbiAgICBzZXRPcHRpb25TZWxlY3RlZChvcHRpb25zLCBlbGVtZW50LCBjb25maWcpO1xuICB9IGVsc2Uge1xuICAgIGlmICghZWxlbWVudC5tdWx0aXBsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc0hUTUxPcHRpb25FbGVtZW50QXJyYXkob3B0aW9ucykpIHtcbiAgICAgIG9wdGlvbnMuZm9yRWFjaChvcHRpb24gPT4gc2V0T3B0aW9uU2VsZWN0ZWQob3B0aW9uLCBlbGVtZW50LCBjb25maWcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCdvcHRpb24nKS5mb3JFYWNoKG9wdCA9PiB7XG4gICAgICAgIGlmIChvcHRpb25zLmluY2x1ZGVzKG9wdC52YWx1ZSkpIHtcbiAgICAgICAgICBzZXRPcHRpb25TZWxlY3RlZChvcHQsIGVsZW1lbnQsIGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFNldCB0aGUgb3B0aW9uIGluIHRoZSBIVE1MU2VsZWN0RWxlbWVudCB0byBzZWxlY3RlZFxuICogQHBhcmFtIG9wdGlvbiBIVE1MT3B0aW9uRWxlbWVudCB0byBzZWxlY3RcbiAqIEBwYXJhbSBzZWxlY3QgSFRNTFNlbGVjdEVsZW1lbnQgdG8gYWRkIHRoZSBvcHRpb25zIHRvXG4gKiBAcGFyYW0gY29uZmlnIE9iamVjdCB3aXRoIGV4dHJhIGNvbmZpZyB0byBkaXNwYXRjaCBjaGFuZ2UgZXZlbnQgd2hlbiBvcHRpb24gc2VsZWN0ZWRcbiAqXG4gKiBzZXRPcHRpb25TZWxlY3RlZChvcHRpb24sIGVsZW1lbnQsIGNvbmZpZyk7XG4gKi9cbmZ1bmN0aW9uIHNldE9wdGlvblNlbGVjdGVkKG9wdGlvbjogSFRNTE9wdGlvbkVsZW1lbnQsIHNlbGVjdDogSFRNTFNlbGVjdEVsZW1lbnQsIGNvbmZpZzogeyBlbWl0RXZlbnRzOiBib29sZWFuIH0pOiB2b2lkIHtcbiAgb3B0aW9uLnNlbGVjdGVkID0gdHJ1ZTtcbiAgaWYgKGNvbmZpZy5lbWl0RXZlbnRzKSB7XG4gICAgZGlzcGF0Y2hGYWtlRXZlbnQoc2VsZWN0LCAnY2hhbmdlJywgdHJ1ZSk7XG4gIH1cbn1cbiJdfQ==