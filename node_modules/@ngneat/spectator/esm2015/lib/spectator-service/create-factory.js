import { TestBed } from '@angular/core/testing';
import { isType, doesServiceImplementsOnDestroy } from '../types';
import { initialServiceModule } from './initial-module';
import { getDefaultServiceOptions } from './options';
import { SpectatorService } from './spectator-service';
import { overrideModules } from '../spectator/create-factory';
/**
 * @publicApi
 */
export function createServiceFactory(typeOrOptions) {
    const service = isType(typeOrOptions) ? typeOrOptions : typeOrOptions.service;
    const options = isType(typeOrOptions) ? getDefaultServiceOptions({ service }) : getDefaultServiceOptions(typeOrOptions);
    const moduleMetadata = initialServiceModule(options);
    beforeEach(() => {
        TestBed.configureTestingModule(moduleMetadata);
        overrideModules(options);
    });
    afterEach(() => {
        const testedService = TestBed.inject
            ? TestBed.inject(service)
            : TestBed.get(service);
        if (doesServiceImplementsOnDestroy(testedService)) {
            // tslint:disable-next-line:no-life-cycle-call
            testedService.ngOnDestroy();
        }
    });
    return (overrides) => {
        const defaults = { providers: [] };
        const { providers } = Object.assign(Object.assign({}, defaults), overrides);
        if (providers && providers.length) {
            providers.forEach((provider) => {
                TestBed.overrideProvider(provider.provide, provider);
            });
        }
        return new SpectatorService(TestBed.inject ? TestBed.inject(service) : TestBed.get(service));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL25ldGFuZWxiYXNhbC93d3cvc3BlY3RhdG9yL3Byb2plY3RzL3NwZWN0YXRvci9zcmMvIiwic291cmNlcyI6WyJsaWIvc3BlY3RhdG9yLXNlcnZpY2UvY3JlYXRlLWZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE9BQU8sRUFBaUIsTUFBTSx1QkFBdUIsQ0FBQztBQUcvRCxPQUFPLEVBQUUsTUFBTSxFQUFFLDhCQUE4QixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRWxFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3hELE9BQU8sRUFBRSx3QkFBd0IsRUFBMkIsTUFBTSxXQUFXLENBQUM7QUFDOUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBYTlEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLG9CQUFvQixDQUFJLGFBQW1EO0lBQ3pGLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDO0lBQzlFLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsd0JBQXdCLENBQUksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUUzSCxNQUFNLGNBQWMsR0FBRyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVyRCxVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2QsT0FBTyxDQUFDLHNCQUFzQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQy9DLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztJQUVILFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYixNQUFNLGFBQWEsR0FBUyxPQUFRLENBQUMsTUFBTTtZQUN6QyxDQUFDLENBQXVFLE9BQVEsQ0FBQyxNQUFNLENBQUksT0FBTyxDQUFDO1lBQ25HLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXpCLElBQUksOEJBQThCLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDakQsOENBQThDO1lBQzlDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUM3QjtJQUNILENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxDQUFDLFNBQXdDLEVBQUUsRUFBRTtRQUNsRCxNQUFNLFFBQVEsR0FBaUMsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDakUsTUFBTSxFQUFFLFNBQVMsRUFBRSxtQ0FBUSxRQUFRLEdBQUssU0FBUyxDQUFFLENBQUM7UUFFcEQsSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRTtZQUNqQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBa0IsRUFBRSxFQUFFO2dCQUN2QyxPQUFPLENBQUMsZ0JBQWdCLENBQUUsUUFBZ0IsQ0FBQyxPQUFPLEVBQUUsUUFBZSxDQUFDLENBQUM7WUFDdkUsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sSUFBSSxnQkFBZ0IsQ0FBSSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDbEcsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb3ZpZGVyLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUZXN0QmVkLCBUZXN0QmVkU3RhdGljIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcblxuaW1wb3J0IHsgQmFzZVNwZWN0YXRvck92ZXJyaWRlcyB9IGZyb20gJy4uL2Jhc2Uvb3B0aW9ucyc7XG5pbXBvcnQgeyBpc1R5cGUsIGRvZXNTZXJ2aWNlSW1wbGVtZW50c09uRGVzdHJveSB9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IHsgaW5pdGlhbFNlcnZpY2VNb2R1bGUgfSBmcm9tICcuL2luaXRpYWwtbW9kdWxlJztcbmltcG9ydCB7IGdldERlZmF1bHRTZXJ2aWNlT3B0aW9ucywgU3BlY3RhdG9yU2VydmljZU9wdGlvbnMgfSBmcm9tICcuL29wdGlvbnMnO1xuaW1wb3J0IHsgU3BlY3RhdG9yU2VydmljZSB9IGZyb20gJy4vc3BlY3RhdG9yLXNlcnZpY2UnO1xuaW1wb3J0IHsgb3ZlcnJpZGVNb2R1bGVzIH0gZnJvbSAnLi4vc3BlY3RhdG9yL2NyZWF0ZS1mYWN0b3J5JztcblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCB0eXBlIFNwZWN0YXRvclNlcnZpY2VGYWN0b3J5PFM+ID0gKG92ZXJyaWRlcz86IFNwZWN0YXRvclNlcnZpY2VPdmVycmlkZXM8Uz4pID0+IFNwZWN0YXRvclNlcnZpY2U8Uz47XG5cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZW1wdHktaW50ZXJmYWNlXG5leHBvcnQgaW50ZXJmYWNlIFNwZWN0YXRvclNlcnZpY2VPdmVycmlkZXM8Uz4gZXh0ZW5kcyBCYXNlU3BlY3RhdG9yT3ZlcnJpZGVzIHt9XG5cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VydmljZUZhY3Rvcnk8Uz4odHlwZU9yT3B0aW9uczogVHlwZTxTPiB8IFNwZWN0YXRvclNlcnZpY2VPcHRpb25zPFM+KTogU3BlY3RhdG9yU2VydmljZUZhY3Rvcnk8Uz4ge1xuICBjb25zdCBzZXJ2aWNlID0gaXNUeXBlKHR5cGVPck9wdGlvbnMpID8gdHlwZU9yT3B0aW9ucyA6IHR5cGVPck9wdGlvbnMuc2VydmljZTtcbiAgY29uc3Qgb3B0aW9ucyA9IGlzVHlwZSh0eXBlT3JPcHRpb25zKSA/IGdldERlZmF1bHRTZXJ2aWNlT3B0aW9uczxTPih7IHNlcnZpY2UgfSkgOiBnZXREZWZhdWx0U2VydmljZU9wdGlvbnModHlwZU9yT3B0aW9ucyk7XG5cbiAgY29uc3QgbW9kdWxlTWV0YWRhdGEgPSBpbml0aWFsU2VydmljZU1vZHVsZShvcHRpb25zKTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUobW9kdWxlTWV0YWRhdGEpO1xuICAgIG92ZXJyaWRlTW9kdWxlcyhvcHRpb25zKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBjb25zdCB0ZXN0ZWRTZXJ2aWNlID0gKDxhbnk+VGVzdEJlZCkuaW5qZWN0XG4gICAgICA/ICg8eyBpbmplY3Q8VD4odG9rZW46IFR5cGU8VD4sIG5vdEZvdW5kVmFsdWU/OiBUKTogVCB9ICYgVGVzdEJlZFN0YXRpYz5UZXN0QmVkKS5pbmplY3Q8Uz4oc2VydmljZSlcbiAgICAgIDogVGVzdEJlZC5nZXQoc2VydmljZSk7XG5cbiAgICBpZiAoZG9lc1NlcnZpY2VJbXBsZW1lbnRzT25EZXN0cm95KHRlc3RlZFNlcnZpY2UpKSB7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tbGlmZS1jeWNsZS1jYWxsXG4gICAgICB0ZXN0ZWRTZXJ2aWNlLm5nT25EZXN0cm95KCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gKG92ZXJyaWRlcz86IFNwZWN0YXRvclNlcnZpY2VPdmVycmlkZXM8Uz4pID0+IHtcbiAgICBjb25zdCBkZWZhdWx0czogU3BlY3RhdG9yU2VydmljZU92ZXJyaWRlczxTPiA9IHsgcHJvdmlkZXJzOiBbXSB9O1xuICAgIGNvbnN0IHsgcHJvdmlkZXJzIH0gPSB7IC4uLmRlZmF1bHRzLCAuLi5vdmVycmlkZXMgfTtcblxuICAgIGlmIChwcm92aWRlcnMgJiYgcHJvdmlkZXJzLmxlbmd0aCkge1xuICAgICAgcHJvdmlkZXJzLmZvckVhY2goKHByb3ZpZGVyOiBQcm92aWRlcikgPT4ge1xuICAgICAgICBUZXN0QmVkLm92ZXJyaWRlUHJvdmlkZXIoKHByb3ZpZGVyIGFzIGFueSkucHJvdmlkZSwgcHJvdmlkZXIgYXMgYW55KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgU3BlY3RhdG9yU2VydmljZTxTPihUZXN0QmVkLmluamVjdCA/IFRlc3RCZWQuaW5qZWN0KHNlcnZpY2UpIDogVGVzdEJlZC5nZXQoc2VydmljZSkpO1xuICB9O1xufVxuIl19