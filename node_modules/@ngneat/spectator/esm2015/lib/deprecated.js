import { Component, EventEmitter, Directive } from '@angular/core';
export function MockComponentDeprecated(options) {
    const metadata = {
        selector: options.selector,
        template: options.template || '',
        inputs: options.inputs,
        outputs: options.outputs || [],
        exportAs: options.exportAs || ''
    };
    class Mock {
    }
    metadata.outputs.forEach(method => {
        Mock.prototype[method] = new EventEmitter();
    });
    return Component(metadata)(Mock);
}
export function MockDirectiveDeprecated(options) {
    const metadata = {
        selector: options.selector,
        inputs: options.inputs,
        outputs: options.outputs || [],
        exportAs: options.exportAs || ''
    };
    class Mock {
    }
    metadata.outputs.forEach(method => {
        Mock.prototype[method] = new EventEmitter();
    });
    return Directive(metadata)(Mock);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwcmVjYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbmV0YW5lbGJhc2FsL3d3dy9zcGVjdGF0b3IvcHJvamVjdHMvc3BlY3RhdG9yL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9kZXByZWNhdGVkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVuRSxNQUFNLFVBQVUsdUJBQXVCLENBQUMsT0FBa0I7SUFDeEQsTUFBTSxRQUFRLEdBQWM7UUFDMUIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRO1FBQzFCLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUSxJQUFJLEVBQUU7UUFDaEMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO1FBQ3RCLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxJQUFJLEVBQUU7UUFDOUIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRLElBQUksRUFBRTtLQUNqQyxDQUFDO0lBRUYsTUFBTSxJQUFJO0tBQUc7SUFFWixRQUFnQixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDekMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO0lBQ25ELENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBVyxDQUFDLENBQUM7QUFDMUMsQ0FBQztBQUVELE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxPQUFrQjtJQUN4RCxNQUFNLFFBQVEsR0FBYztRQUMxQixRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7UUFDMUIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO1FBQ3RCLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTyxJQUFJLEVBQUU7UUFDOUIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRLElBQUksRUFBRTtLQUNqQyxDQUFDO0lBRUYsTUFBTSxJQUFJO0tBQUc7SUFFWixRQUFnQixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDekMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO0lBQ25ELENBQUMsQ0FBQyxDQUFDO0lBRUgsT0FBTyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBVyxDQUFDLENBQUM7QUFDMUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGZ1bmN0aW9uIE1vY2tDb21wb25lbnREZXByZWNhdGVkKG9wdGlvbnM6IENvbXBvbmVudCk6IENvbXBvbmVudCB7XG4gIGNvbnN0IG1ldGFkYXRhOiBDb21wb25lbnQgPSB7XG4gICAgc2VsZWN0b3I6IG9wdGlvbnMuc2VsZWN0b3IsXG4gICAgdGVtcGxhdGU6IG9wdGlvbnMudGVtcGxhdGUgfHwgJycsXG4gICAgaW5wdXRzOiBvcHRpb25zLmlucHV0cyxcbiAgICBvdXRwdXRzOiBvcHRpb25zLm91dHB1dHMgfHwgW10sXG4gICAgZXhwb3J0QXM6IG9wdGlvbnMuZXhwb3J0QXMgfHwgJydcbiAgfTtcblxuICBjbGFzcyBNb2NrIHt9XG5cbiAgKG1ldGFkYXRhIGFzIGFueSkub3V0cHV0cy5mb3JFYWNoKG1ldGhvZCA9PiB7XG4gICAgTW9jay5wcm90b3R5cGVbbWV0aG9kXSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICB9KTtcblxuICByZXR1cm4gQ29tcG9uZW50KG1ldGFkYXRhKShNb2NrIGFzIGFueSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBNb2NrRGlyZWN0aXZlRGVwcmVjYXRlZChvcHRpb25zOiBEaXJlY3RpdmUpOiBEaXJlY3RpdmUge1xuICBjb25zdCBtZXRhZGF0YTogRGlyZWN0aXZlID0ge1xuICAgIHNlbGVjdG9yOiBvcHRpb25zLnNlbGVjdG9yLFxuICAgIGlucHV0czogb3B0aW9ucy5pbnB1dHMsXG4gICAgb3V0cHV0czogb3B0aW9ucy5vdXRwdXRzIHx8IFtdLFxuICAgIGV4cG9ydEFzOiBvcHRpb25zLmV4cG9ydEFzIHx8ICcnXG4gIH07XG5cbiAgY2xhc3MgTW9jayB7fVxuXG4gIChtZXRhZGF0YSBhcyBhbnkpLm91dHB1dHMuZm9yRWFjaChtZXRob2QgPT4ge1xuICAgIE1vY2sucHJvdG90eXBlW21ldGhvZF0gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgfSk7XG5cbiAgcmV0dXJuIERpcmVjdGl2ZShtZXRhZGF0YSkoTW9jayBhcyBhbnkpO1xufVxuIl19