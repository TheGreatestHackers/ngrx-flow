import { async, TestBed } from '@angular/core/testing';
import { BrowserDynamicTestingModule } from '@angular/platform-browser-dynamic/testing';
import { setProps } from '../internals/query';
import * as customMatchers from '../matchers';
import { addMatchers } from '../core';
import { isType } from '../types';
import { initialSpectatorPipeModule } from './initial-module';
import { getSpectatorPipeDefaultOptions } from './options';
import { SpectatorPipe } from './spectator-pipe';
import { overrideModules } from '../spectator/create-factory';
/**
 * @publicApi
 */
export function createPipeFactory(typeOrOptions) {
    const options = isType(typeOrOptions)
        ? getSpectatorPipeDefaultOptions({ pipe: typeOrOptions })
        : getSpectatorPipeDefaultOptions(typeOrOptions);
    const moduleMetadata = initialSpectatorPipeModule(options);
    beforeEach(async(() => {
        addMatchers(customMatchers);
        TestBed.configureTestingModule(moduleMetadata);
        overrideModules(options);
    }));
    return (templateOrOverrides, overrides) => {
        const defaults = {
            hostProps: {},
            detectChanges: true,
            providers: []
        };
        const resolvedOverrides = typeof templateOrOverrides === 'object' ? templateOrOverrides : overrides;
        const { detectChanges, hostProps, providers } = Object.assign(Object.assign({}, defaults), resolvedOverrides);
        const template = typeof templateOrOverrides === 'string' ? templateOrOverrides : options.template;
        if (providers && providers.length) {
            providers.forEach((provider) => {
                TestBed.overrideProvider(provider.provide, provider);
            });
        }
        if (template) {
            TestBed.overrideModule(BrowserDynamicTestingModule, {
                set: {
                    entryComponents: moduleMetadata.entryComponents
                }
            }).overrideComponent(options.host, {
                set: { template }
            });
        }
        const spectator = createSpectatorPipe(options, hostProps);
        if (options.detectChanges && detectChanges) {
            spectator.detectChanges();
        }
        return spectator;
    };
}
function createSpectatorPipe(options, hostProps) {
    const hostFixture = TestBed.createComponent(options.host);
    const debugElement = hostFixture.debugElement;
    const hostComponent = setProps(hostFixture.componentInstance, hostProps);
    return new SpectatorPipe(hostComponent, hostFixture, hostFixture.debugElement, debugElement.nativeElement);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL25ldGFuZWxiYXNhbC93d3cvc3BlY3RhdG9yL3Byb2plY3RzL3NwZWN0YXRvci9zcmMvIiwic291cmNlcyI6WyJsaWIvc3BlY3RhdG9yLXBpcGUvY3JlYXRlLWZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUV4RixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDOUMsT0FBTyxLQUFLLGNBQWMsTUFBTSxhQUFhLENBQUM7QUFFOUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN0QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBR2xDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzlELE9BQU8sRUFBRSw4QkFBOEIsRUFBd0IsTUFBTSxXQUFXLENBQUM7QUFDakYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQWtCOUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsaUJBQWlCLENBQXVCLGFBQW1EO0lBQ3pHLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDbkMsQ0FBQyxDQUFDLDhCQUE4QixDQUFPLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxDQUFDO1FBQy9ELENBQUMsQ0FBQyw4QkFBOEIsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUVsRCxNQUFNLGNBQWMsR0FBRywwQkFBMEIsQ0FBTyxPQUFPLENBQUMsQ0FBQztJQUVqRSxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtRQUNwQixXQUFXLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDNUIsT0FBTyxDQUFDLHNCQUFzQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQy9DLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRUosT0FBTyxDQUFLLG1CQUE0RCxFQUFFLFNBQXlDLEVBQUUsRUFBRTtRQUNySCxNQUFNLFFBQVEsR0FBa0M7WUFDOUMsU0FBUyxFQUFFLEVBQVM7WUFDcEIsYUFBYSxFQUFFLElBQUk7WUFDbkIsU0FBUyxFQUFFLEVBQUU7U0FDZCxDQUFDO1FBQ0YsTUFBTSxpQkFBaUIsR0FBRyxPQUFPLG1CQUFtQixLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUNwRyxNQUFNLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsbUNBQVEsUUFBUSxHQUFLLGlCQUFpQixDQUFFLENBQUM7UUFDdEYsTUFBTSxRQUFRLEdBQUcsT0FBTyxtQkFBbUIsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO1FBRWxHLElBQUksU0FBUyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUU7WUFDakMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQWtCLEVBQUUsRUFBRTtnQkFDdkMsT0FBTyxDQUFDLGdCQUFnQixDQUFFLFFBQWdCLENBQUMsT0FBTyxFQUFFLFFBQWUsQ0FBQyxDQUFDO1lBQ3ZFLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxJQUFJLFFBQVEsRUFBRTtZQUNaLE9BQU8sQ0FBQyxjQUFjLENBQUMsMkJBQTJCLEVBQUU7Z0JBQ2xELEdBQUcsRUFBRTtvQkFDSCxlQUFlLEVBQUUsY0FBYyxDQUFDLGVBQWU7aUJBQ2hEO2FBQ0YsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUU7Z0JBQ2pDLEdBQUcsRUFBRSxFQUFFLFFBQVEsRUFBRTthQUNsQixDQUFDLENBQUM7U0FDSjtRQUVELE1BQU0sU0FBUyxHQUFHLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUUxRCxJQUFJLE9BQU8sQ0FBQyxhQUFhLElBQUksYUFBYSxFQUFFO1lBQzFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUMzQjtRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLG1CQUFtQixDQUFXLE9BQTZDLEVBQUUsU0FBYztJQUNsRyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxRCxNQUFNLFlBQVksR0FBRyxXQUFXLENBQUMsWUFBWSxDQUFDO0lBRTlDLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsaUJBQWlCLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFekUsT0FBTyxJQUFJLGFBQWEsQ0FBQyxhQUFhLEVBQUUsV0FBVyxFQUFFLFdBQVcsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQzdHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm92aWRlciwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgYXN5bmMsIFRlc3RCZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHsgQnJvd3NlckR5bmFtaWNUZXN0aW5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci1keW5hbWljL3Rlc3RpbmcnO1xuXG5pbXBvcnQgeyBzZXRQcm9wcyB9IGZyb20gJy4uL2ludGVybmFscy9xdWVyeSc7XG5pbXBvcnQgKiBhcyBjdXN0b21NYXRjaGVycyBmcm9tICcuLi9tYXRjaGVycyc7XG5pbXBvcnQgeyBCYXNlU3BlY3RhdG9yT3ZlcnJpZGVzIH0gZnJvbSAnLi4vYmFzZS9vcHRpb25zJztcbmltcG9ydCB7IGFkZE1hdGNoZXJzIH0gZnJvbSAnLi4vY29yZSc7XG5pbXBvcnQgeyBpc1R5cGUgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBIb3N0Q29tcG9uZW50IH0gZnJvbSAnLi4vc3BlY3RhdG9yLWhvc3QvaG9zdC1jb21wb25lbnQnO1xuXG5pbXBvcnQgeyBpbml0aWFsU3BlY3RhdG9yUGlwZU1vZHVsZSB9IGZyb20gJy4vaW5pdGlhbC1tb2R1bGUnO1xuaW1wb3J0IHsgZ2V0U3BlY3RhdG9yUGlwZURlZmF1bHRPcHRpb25zLCBTcGVjdGF0b3JQaXBlT3B0aW9ucyB9IGZyb20gJy4vb3B0aW9ucyc7XG5pbXBvcnQgeyBTcGVjdGF0b3JQaXBlIH0gZnJvbSAnLi9zcGVjdGF0b3ItcGlwZSc7XG5pbXBvcnQgeyBvdmVycmlkZU1vZHVsZXMgfSBmcm9tICcuLi9zcGVjdGF0b3IvY3JlYXRlLWZhY3RvcnknO1xuXG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IHR5cGUgU3BlY3RhdG9yUGlwZUZhY3Rvcnk8UCwgSD4gPSA8SFA+KFxuICB0ZW1wbGF0ZU9yT3ZlcnJpZGVzPzogc3RyaW5nIHwgU3BlY3RhdG9yUGlwZU92ZXJyaWRlczxILCBIUD4sXG4gIG92ZXJyaWRlcz86IFNwZWN0YXRvclBpcGVPdmVycmlkZXM8SCwgSFA+XG4pID0+IFNwZWN0YXRvclBpcGU8UCwgSCAmIChIb3N0Q29tcG9uZW50IGV4dGVuZHMgSCA/IEhQIDogdW5rbm93bik+O1xuXG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTcGVjdGF0b3JQaXBlT3ZlcnJpZGVzPEgsIEhQPiBleHRlbmRzIEJhc2VTcGVjdGF0b3JPdmVycmlkZXMge1xuICBkZXRlY3RDaGFuZ2VzPzogYm9vbGVhbjtcbiAgaG9zdFByb3BzPzogSG9zdENvbXBvbmVudCBleHRlbmRzIEggPyBIUCA6IFBhcnRpYWw8SD47XG59XG5cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUGlwZUZhY3Rvcnk8UCwgSCA9IEhvc3RDb21wb25lbnQ+KHR5cGVPck9wdGlvbnM6IFR5cGU8UD4gfCBTcGVjdGF0b3JQaXBlT3B0aW9uczxQLCBIPik6IFNwZWN0YXRvclBpcGVGYWN0b3J5PFAsIEg+IHtcbiAgY29uc3Qgb3B0aW9ucyA9IGlzVHlwZSh0eXBlT3JPcHRpb25zKVxuICAgID8gZ2V0U3BlY3RhdG9yUGlwZURlZmF1bHRPcHRpb25zPFAsIEg+KHsgcGlwZTogdHlwZU9yT3B0aW9ucyB9KVxuICAgIDogZ2V0U3BlY3RhdG9yUGlwZURlZmF1bHRPcHRpb25zKHR5cGVPck9wdGlvbnMpO1xuXG4gIGNvbnN0IG1vZHVsZU1ldGFkYXRhID0gaW5pdGlhbFNwZWN0YXRvclBpcGVNb2R1bGU8UCwgSD4ob3B0aW9ucyk7XG5cbiAgYmVmb3JlRWFjaChhc3luYygoKSA9PiB7XG4gICAgYWRkTWF0Y2hlcnMoY3VzdG9tTWF0Y2hlcnMpO1xuICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZShtb2R1bGVNZXRhZGF0YSk7XG4gICAgb3ZlcnJpZGVNb2R1bGVzKG9wdGlvbnMpO1xuICB9KSk7XG5cbiAgcmV0dXJuIDxIUD4odGVtcGxhdGVPck92ZXJyaWRlcz86IHN0cmluZyB8IFNwZWN0YXRvclBpcGVPdmVycmlkZXM8SCwgSFA+LCBvdmVycmlkZXM/OiBTcGVjdGF0b3JQaXBlT3ZlcnJpZGVzPEgsIEhQPikgPT4ge1xuICAgIGNvbnN0IGRlZmF1bHRzOiBTcGVjdGF0b3JQaXBlT3ZlcnJpZGVzPEgsIEhQPiA9IHtcbiAgICAgIGhvc3RQcm9wczoge30gYXMgYW55LFxuICAgICAgZGV0ZWN0Q2hhbmdlczogdHJ1ZSxcbiAgICAgIHByb3ZpZGVyczogW11cbiAgICB9O1xuICAgIGNvbnN0IHJlc29sdmVkT3ZlcnJpZGVzID0gdHlwZW9mIHRlbXBsYXRlT3JPdmVycmlkZXMgPT09ICdvYmplY3QnID8gdGVtcGxhdGVPck92ZXJyaWRlcyA6IG92ZXJyaWRlcztcbiAgICBjb25zdCB7IGRldGVjdENoYW5nZXMsIGhvc3RQcm9wcywgcHJvdmlkZXJzIH0gPSB7IC4uLmRlZmF1bHRzLCAuLi5yZXNvbHZlZE92ZXJyaWRlcyB9O1xuICAgIGNvbnN0IHRlbXBsYXRlID0gdHlwZW9mIHRlbXBsYXRlT3JPdmVycmlkZXMgPT09ICdzdHJpbmcnID8gdGVtcGxhdGVPck92ZXJyaWRlcyA6IG9wdGlvbnMudGVtcGxhdGU7XG5cbiAgICBpZiAocHJvdmlkZXJzICYmIHByb3ZpZGVycy5sZW5ndGgpIHtcbiAgICAgIHByb3ZpZGVycy5mb3JFYWNoKChwcm92aWRlcjogUHJvdmlkZXIpID0+IHtcbiAgICAgICAgVGVzdEJlZC5vdmVycmlkZVByb3ZpZGVyKChwcm92aWRlciBhcyBhbnkpLnByb3ZpZGUsIHByb3ZpZGVyIGFzIGFueSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgIFRlc3RCZWQub3ZlcnJpZGVNb2R1bGUoQnJvd3NlckR5bmFtaWNUZXN0aW5nTW9kdWxlLCB7XG4gICAgICAgIHNldDoge1xuICAgICAgICAgIGVudHJ5Q29tcG9uZW50czogbW9kdWxlTWV0YWRhdGEuZW50cnlDb21wb25lbnRzXG4gICAgICAgIH1cbiAgICAgIH0pLm92ZXJyaWRlQ29tcG9uZW50KG9wdGlvbnMuaG9zdCwge1xuICAgICAgICBzZXQ6IHsgdGVtcGxhdGUgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3BlY3RhdG9yID0gY3JlYXRlU3BlY3RhdG9yUGlwZShvcHRpb25zLCBob3N0UHJvcHMpO1xuXG4gICAgaWYgKG9wdGlvbnMuZGV0ZWN0Q2hhbmdlcyAmJiBkZXRlY3RDaGFuZ2VzKSB7XG4gICAgICBzcGVjdGF0b3IuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cblxuICAgIHJldHVybiBzcGVjdGF0b3I7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNwZWN0YXRvclBpcGU8UCwgSCwgSFA+KG9wdGlvbnM6IFJlcXVpcmVkPFNwZWN0YXRvclBpcGVPcHRpb25zPFAsIEg+PiwgaG9zdFByb3BzPzogSFApOiBTcGVjdGF0b3JQaXBlPFAsIEggJiBIUD4ge1xuICBjb25zdCBob3N0Rml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KG9wdGlvbnMuaG9zdCk7XG4gIGNvbnN0IGRlYnVnRWxlbWVudCA9IGhvc3RGaXh0dXJlLmRlYnVnRWxlbWVudDtcblxuICBjb25zdCBob3N0Q29tcG9uZW50ID0gc2V0UHJvcHMoaG9zdEZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2UsIGhvc3RQcm9wcyk7XG5cbiAgcmV0dXJuIG5ldyBTcGVjdGF0b3JQaXBlKGhvc3RDb21wb25lbnQsIGhvc3RGaXh0dXJlLCBob3N0Rml4dHVyZS5kZWJ1Z0VsZW1lbnQsIGRlYnVnRWxlbWVudC5uYXRpdmVFbGVtZW50KTtcbn1cbiJdfQ==