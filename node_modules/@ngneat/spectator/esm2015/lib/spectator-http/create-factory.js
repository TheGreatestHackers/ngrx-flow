import { HttpClient } from '@angular/common/http';
import { HttpTestingController } from '@angular/common/http/testing';
import { TestBed } from '@angular/core/testing';
import { isType } from '../types';
import { initialHttpModule } from './initial-module';
import { getDefaultHttpOptions } from './options';
import { SpectatorHttp } from './spectator-http';
import { overrideModules } from '../spectator/create-factory';
/**
 * @publicApi
 */
export function createHttpFactory(typeOrOptions) {
    const service = isType(typeOrOptions) ? typeOrOptions : typeOrOptions.service;
    const options = isType(typeOrOptions) ? getDefaultHttpOptions({ service }) : getDefaultHttpOptions(typeOrOptions);
    const moduleMetadata = initialHttpModule(options);
    beforeEach(() => {
        TestBed.configureTestingModule(moduleMetadata);
        overrideModules(options);
    });
    afterEach(() => {
        if (TestBed.inject) {
            TestBed.inject(HttpTestingController).verify();
        }
        else {
            TestBed.get(HttpTestingController).verify();
        }
    });
    return (overrides) => {
        const defaults = { providers: [] };
        const { providers } = Object.assign(Object.assign({}, defaults), overrides);
        if (providers && providers.length) {
            providers.forEach((provider) => {
                TestBed.overrideProvider(provider.provide, provider);
            });
        }
        /**
         * Back compatibility, angular under 9 version doesnt have a inject function
         */
        if (!TestBed.inject) {
            return new SpectatorHttp(TestBed.get(service), TestBed.get(HttpClient), TestBed.get(HttpTestingController));
        }
        return new SpectatorHttp(TestBed.inject(service), TestBed.inject(HttpClient), TestBed.inject(HttpTestingController));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL25ldGFuZWxiYXNhbC93d3cvc3BlY3RhdG9yL3Byb2plY3RzL3NwZWN0YXRvci9zcmMvIiwic291cmNlcyI6WyJsaWIvc3BlY3RhdG9yLWh0dHAvY3JlYXRlLWZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRXJFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUdoRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRWxDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxxQkFBcUIsRUFBd0IsTUFBTSxXQUFXLENBQUM7QUFDeEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQWE5RDs7R0FFRztBQUNILE1BQU0sVUFBVSxpQkFBaUIsQ0FBSSxhQUFnRDtJQUNuRixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQztJQUM5RSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDckgsTUFBTSxjQUFjLEdBQUcsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFbEQsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUMvQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7SUFFSCxTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ2IsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ2xCLE9BQU8sQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNoRDthQUFNO1lBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQzdDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLENBQUMsU0FBa0MsRUFBRSxFQUFFO1FBQzVDLE1BQU0sUUFBUSxHQUEyQixFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUMzRCxNQUFNLEVBQUUsU0FBUyxFQUFFLG1DQUFRLFFBQVEsR0FBSyxTQUFTLENBQUUsQ0FBQztRQUVwRCxJQUFJLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFO1lBQ2pDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFrQixFQUFFLEVBQUU7Z0JBQ3ZDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBRSxRQUFnQixDQUFDLE9BQU8sRUFBRSxRQUFlLENBQUMsQ0FBQztZQUN2RSxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQ7O1dBRUc7UUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNuQixPQUFPLElBQUksYUFBYSxDQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztTQUNoSDtRQUVELE9BQU8sSUFBSSxhQUFhLENBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0lBQzFILENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSHR0cFRlc3RpbmdDb250cm9sbGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAvdGVzdGluZyc7XG5pbXBvcnQgeyBQcm92aWRlciwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGVzdEJlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5cbmltcG9ydCB7IEJhc2VTcGVjdGF0b3JPdmVycmlkZXMgfSBmcm9tICcuLi9iYXNlL29wdGlvbnMnO1xuaW1wb3J0IHsgaXNUeXBlIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbXBvcnQgeyBpbml0aWFsSHR0cE1vZHVsZSB9IGZyb20gJy4vaW5pdGlhbC1tb2R1bGUnO1xuaW1wb3J0IHsgZ2V0RGVmYXVsdEh0dHBPcHRpb25zLCBTcGVjdGF0b3JIdHRwT3B0aW9ucyB9IGZyb20gJy4vb3B0aW9ucyc7XG5pbXBvcnQgeyBTcGVjdGF0b3JIdHRwIH0gZnJvbSAnLi9zcGVjdGF0b3ItaHR0cCc7XG5pbXBvcnQgeyBvdmVycmlkZU1vZHVsZXMgfSBmcm9tICcuLi9zcGVjdGF0b3IvY3JlYXRlLWZhY3RvcnknO1xuXG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IHR5cGUgU3BlY3RhdG9ySHR0cEZhY3Rvcnk8Uz4gPSAob3ZlcnJpZGVzPzogQ3JlYXRlSHR0cE92ZXJyaWRlczxTPikgPT4gU3BlY3RhdG9ySHR0cDxTPjtcblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1lbXB0eS1pbnRlcmZhY2VcbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlSHR0cE92ZXJyaWRlczxTPiBleHRlbmRzIEJhc2VTcGVjdGF0b3JPdmVycmlkZXMge31cblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVIdHRwRmFjdG9yeTxTPih0eXBlT3JPcHRpb25zOiBUeXBlPFM+IHwgU3BlY3RhdG9ySHR0cE9wdGlvbnM8Uz4pOiBTcGVjdGF0b3JIdHRwRmFjdG9yeTxTPiB7XG4gIGNvbnN0IHNlcnZpY2UgPSBpc1R5cGUodHlwZU9yT3B0aW9ucykgPyB0eXBlT3JPcHRpb25zIDogdHlwZU9yT3B0aW9ucy5zZXJ2aWNlO1xuICBjb25zdCBvcHRpb25zID0gaXNUeXBlKHR5cGVPck9wdGlvbnMpID8gZ2V0RGVmYXVsdEh0dHBPcHRpb25zPFM+KHsgc2VydmljZSB9KSA6IGdldERlZmF1bHRIdHRwT3B0aW9ucyh0eXBlT3JPcHRpb25zKTtcbiAgY29uc3QgbW9kdWxlTWV0YWRhdGEgPSBpbml0aWFsSHR0cE1vZHVsZShvcHRpb25zKTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUobW9kdWxlTWV0YWRhdGEpO1xuICAgIG92ZXJyaWRlTW9kdWxlcyhvcHRpb25zKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBpZiAoVGVzdEJlZC5pbmplY3QpIHtcbiAgICAgIFRlc3RCZWQuaW5qZWN0KEh0dHBUZXN0aW5nQ29udHJvbGxlcikudmVyaWZ5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIFRlc3RCZWQuZ2V0KEh0dHBUZXN0aW5nQ29udHJvbGxlcikudmVyaWZ5KCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gKG92ZXJyaWRlcz86IENyZWF0ZUh0dHBPdmVycmlkZXM8Uz4pID0+IHtcbiAgICBjb25zdCBkZWZhdWx0czogQ3JlYXRlSHR0cE92ZXJyaWRlczxTPiA9IHsgcHJvdmlkZXJzOiBbXSB9O1xuICAgIGNvbnN0IHsgcHJvdmlkZXJzIH0gPSB7IC4uLmRlZmF1bHRzLCAuLi5vdmVycmlkZXMgfTtcblxuICAgIGlmIChwcm92aWRlcnMgJiYgcHJvdmlkZXJzLmxlbmd0aCkge1xuICAgICAgcHJvdmlkZXJzLmZvckVhY2goKHByb3ZpZGVyOiBQcm92aWRlcikgPT4ge1xuICAgICAgICBUZXN0QmVkLm92ZXJyaWRlUHJvdmlkZXIoKHByb3ZpZGVyIGFzIGFueSkucHJvdmlkZSwgcHJvdmlkZXIgYXMgYW55KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJhY2sgY29tcGF0aWJpbGl0eSwgYW5ndWxhciB1bmRlciA5IHZlcnNpb24gZG9lc250IGhhdmUgYSBpbmplY3QgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBpZiAoIVRlc3RCZWQuaW5qZWN0KSB7XG4gICAgICByZXR1cm4gbmV3IFNwZWN0YXRvckh0dHA8Uz4oVGVzdEJlZC5nZXQoc2VydmljZSksIFRlc3RCZWQuZ2V0KEh0dHBDbGllbnQpLCBUZXN0QmVkLmdldChIdHRwVGVzdGluZ0NvbnRyb2xsZXIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFNwZWN0YXRvckh0dHA8Uz4oVGVzdEJlZC5pbmplY3Qoc2VydmljZSksIFRlc3RCZWQuaW5qZWN0KEh0dHBDbGllbnQpLCBUZXN0QmVkLmluamVjdChIdHRwVGVzdGluZ0NvbnRyb2xsZXIpKTtcbiAgfTtcbn1cbiJdfQ==