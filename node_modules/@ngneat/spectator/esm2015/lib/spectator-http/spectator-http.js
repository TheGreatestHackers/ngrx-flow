import { BaseSpectator } from '../base/base-spectator';
/**
 * @publicApi
 */
export var HttpMethod;
(function (HttpMethod) {
    HttpMethod["GET"] = "GET";
    HttpMethod["POST"] = "POST";
    HttpMethod["DELETE"] = "DELETE";
    HttpMethod["PUT"] = "PUT";
    HttpMethod["PATCH"] = "PATCH";
    HttpMethod["HEAD"] = "HEAD";
    HttpMethod["JSONP"] = "JSONP";
    HttpMethod["OPTIONS"] = "OPTIONS";
})(HttpMethod || (HttpMethod = {}));
/**
 * @publicApi
 */
export class SpectatorHttp extends BaseSpectator {
    constructor(service, httpClient, controller) {
        super();
        this.service = service;
        this.httpClient = httpClient;
        this.controller = controller;
        // small workaround to prevent issues if destructuring SpectatorHttp, which was common in Spectator 3
        // remove in v5?
        this.expectOne = this.expectOne.bind(this);
        this.expectConcurrent = this.expectConcurrent.bind(this);
    }
    expectOne(url, method) {
        expect(true).toBe(true); // workaround to avoid `Spec has no expectations` https://github.com/NetanelBasal/spectator/issues/75
        const req = this.controller.expectOne({
            url,
            method
        });
        // assert that there are no outstanding requests.
        this.controller.verify();
        return req;
    }
    expectConcurrent(expectations) {
        const requests = expectations.map((expectation) => {
            return this.controller.expectOne({
                url: expectation.url,
                method: expectation.method
            });
        });
        this.controller.verify();
        return requests;
    }
    flushAll(requests, args) {
        requests.forEach((request, idx) => {
            request.flush(args[idx]);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlY3RhdG9yLWh0dHAuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL25ldGFuZWxiYXNhbC93d3cvc3BlY3RhdG9yL3Byb2plY3RzL3NwZWN0YXRvci9zcmMvIiwic291cmNlcyI6WyJsaWIvc3BlY3RhdG9yLWh0dHAvc3BlY3RhdG9yLWh0dHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXZEOztHQUVHO0FBQ0gsTUFBTSxDQUFOLElBQVksVUFTWDtBQVRELFdBQVksVUFBVTtJQUNwQix5QkFBVyxDQUFBO0lBQ1gsMkJBQWEsQ0FBQTtJQUNiLCtCQUFpQixDQUFBO0lBQ2pCLHlCQUFXLENBQUE7SUFDWCw2QkFBZSxDQUFBO0lBQ2YsMkJBQWEsQ0FBQTtJQUNiLDZCQUFlLENBQUE7SUFDZixpQ0FBbUIsQ0FBQTtBQUNyQixDQUFDLEVBVFcsVUFBVSxLQUFWLFVBQVUsUUFTckI7QUFPRDs7R0FFRztBQUNILE1BQU0sT0FBTyxhQUFpQixTQUFRLGFBQWE7SUFDakQsWUFBbUIsT0FBVSxFQUFTLFVBQXNCLEVBQVMsVUFBaUM7UUFDcEcsS0FBSyxFQUFFLENBQUM7UUFEUyxZQUFPLEdBQVAsT0FBTyxDQUFHO1FBQVMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFTLGVBQVUsR0FBVixVQUFVLENBQXVCO1FBR3BHLHFHQUFxRztRQUNyRyxnQkFBZ0I7UUFDaEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRU0sU0FBUyxDQUFDLEdBQVcsRUFBRSxNQUFrQjtRQUM5QyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMscUdBQXFHO1FBRTlILE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDO1lBQ3BDLEdBQUc7WUFDSCxNQUFNO1NBQ1AsQ0FBQyxDQUFDO1FBRUgsaURBQWlEO1FBQ2pELElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFekIsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRU0sZ0JBQWdCLENBQUMsWUFBMEI7UUFDaEQsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQXVCLEVBQUUsRUFBRTtZQUM1RCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDO2dCQUMvQixHQUFHLEVBQUUsV0FBVyxDQUFDLEdBQUc7Z0JBQ3BCLE1BQU0sRUFBRSxXQUFXLENBQUMsTUFBTTthQUMzQixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUM7UUFFekIsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVNLFFBQVEsQ0FBQyxRQUF1QixFQUFFLElBQVc7UUFDbEQsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQW9CLEVBQUUsR0FBVyxFQUFFLEVBQUU7WUFDckQsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBIdHRwVGVzdGluZ0NvbnRyb2xsZXIsIFRlc3RSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAvdGVzdGluZyc7XG5cbmltcG9ydCB7IEJhc2VTcGVjdGF0b3IgfSBmcm9tICcuLi9iYXNlL2Jhc2Utc3BlY3RhdG9yJztcblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBlbnVtIEh0dHBNZXRob2Qge1xuICBHRVQgPSAnR0VUJyxcbiAgUE9TVCA9ICdQT1NUJyxcbiAgREVMRVRFID0gJ0RFTEVURScsXG4gIFBVVCA9ICdQVVQnLFxuICBQQVRDSCA9ICdQQVRDSCcsXG4gIEhFQUQgPSAnSEVBRCcsXG4gIEpTT05QID0gJ0pTT05QJyxcbiAgT1BUSU9OUyA9ICdPUFRJT05TJ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEh0dHBFeHBlY3Qge1xuICB1cmw6IHN0cmluZztcbiAgbWV0aG9kOiBIdHRwTWV0aG9kO1xufVxuXG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGNsYXNzIFNwZWN0YXRvckh0dHA8Uz4gZXh0ZW5kcyBCYXNlU3BlY3RhdG9yIHtcbiAgY29uc3RydWN0b3IocHVibGljIHNlcnZpY2U6IFMsIHB1YmxpYyBodHRwQ2xpZW50OiBIdHRwQ2xpZW50LCBwdWJsaWMgY29udHJvbGxlcjogSHR0cFRlc3RpbmdDb250cm9sbGVyKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIC8vIHNtYWxsIHdvcmthcm91bmQgdG8gcHJldmVudCBpc3N1ZXMgaWYgZGVzdHJ1Y3R1cmluZyBTcGVjdGF0b3JIdHRwLCB3aGljaCB3YXMgY29tbW9uIGluIFNwZWN0YXRvciAzXG4gICAgLy8gcmVtb3ZlIGluIHY1P1xuICAgIHRoaXMuZXhwZWN0T25lID0gdGhpcy5leHBlY3RPbmUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmV4cGVjdENvbmN1cnJlbnQgPSB0aGlzLmV4cGVjdENvbmN1cnJlbnQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHB1YmxpYyBleHBlY3RPbmUodXJsOiBzdHJpbmcsIG1ldGhvZDogSHR0cE1ldGhvZCk6IFRlc3RSZXF1ZXN0IHtcbiAgICBleHBlY3QodHJ1ZSkudG9CZSh0cnVlKTsgLy8gd29ya2Fyb3VuZCB0byBhdm9pZCBgU3BlYyBoYXMgbm8gZXhwZWN0YXRpb25zYCBodHRwczovL2dpdGh1Yi5jb20vTmV0YW5lbEJhc2FsL3NwZWN0YXRvci9pc3N1ZXMvNzVcblxuICAgIGNvbnN0IHJlcSA9IHRoaXMuY29udHJvbGxlci5leHBlY3RPbmUoe1xuICAgICAgdXJsLFxuICAgICAgbWV0aG9kXG4gICAgfSk7XG5cbiAgICAvLyBhc3NlcnQgdGhhdCB0aGVyZSBhcmUgbm8gb3V0c3RhbmRpbmcgcmVxdWVzdHMuXG4gICAgdGhpcy5jb250cm9sbGVyLnZlcmlmeSgpO1xuXG4gICAgcmV0dXJuIHJlcTtcbiAgfVxuXG4gIHB1YmxpYyBleHBlY3RDb25jdXJyZW50KGV4cGVjdGF0aW9uczogSHR0cEV4cGVjdFtdKTogVGVzdFJlcXVlc3RbXSB7XG4gICAgY29uc3QgcmVxdWVzdHMgPSBleHBlY3RhdGlvbnMubWFwKChleHBlY3RhdGlvbjogSHR0cEV4cGVjdCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuY29udHJvbGxlci5leHBlY3RPbmUoe1xuICAgICAgICB1cmw6IGV4cGVjdGF0aW9uLnVybCxcbiAgICAgICAgbWV0aG9kOiBleHBlY3RhdGlvbi5tZXRob2RcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy5jb250cm9sbGVyLnZlcmlmeSgpO1xuXG4gICAgcmV0dXJuIHJlcXVlc3RzO1xuICB9XG5cbiAgcHVibGljIGZsdXNoQWxsKHJlcXVlc3RzOiBUZXN0UmVxdWVzdFtdLCBhcmdzOiBhbnlbXSk6IHZvaWQge1xuICAgIHJlcXVlc3RzLmZvckVhY2goKHJlcXVlc3Q6IFRlc3RSZXF1ZXN0LCBpZHg6IG51bWJlcikgPT4ge1xuICAgICAgcmVxdWVzdC5mbHVzaChhcmdzW2lkeF0pO1xuICAgIH0pO1xuICB9XG59XG4iXX0=