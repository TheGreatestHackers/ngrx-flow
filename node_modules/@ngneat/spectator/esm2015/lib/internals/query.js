import { SimpleChange } from '@angular/core';
import { By } from '@angular/platform-browser';
import { DOMSelector } from '../dom-selectors';
import { isString } from '../types';
export function getChildren(debugElementRoot) {
    return (directiveOrSelector, options = { root: false, read: undefined }) => {
        if (directiveOrSelector instanceof DOMSelector) {
            return directiveOrSelector.execute(debugElementRoot.nativeElement);
        }
        const debugElements = debugElementRoot.queryAll(isString(directiveOrSelector) ? By.css(directiveOrSelector) : By.directive(directiveOrSelector));
        if (options.read) {
            return debugElements.map(debug => debug.injector.get(options.read));
        }
        if (isString(directiveOrSelector)) {
            return debugElements.map(debug => debug.nativeElement);
        }
        return debugElements.map(debug => debug.injector.get(directiveOrSelector));
    };
}
export function setProps(instance, keyOrKeyValues, value, firstChange = true) {
    var _a;
    const changes = {};
    const update = (key, newValue) => {
        if (instance[key] !== newValue) {
            changes[key] = new SimpleChange(instance[key], newValue, firstChange);
        }
        instance[key] = newValue;
    };
    if (isString(keyOrKeyValues)) {
        update(keyOrKeyValues, value);
    }
    else {
        // tslint:disable-next-line:forin
        for (const p in keyOrKeyValues) {
            update(p, keyOrKeyValues[p]);
        }
    }
    if (Object.keys(changes).length) {
        // tslint:disable-next-line:no-life-cycle-call
        (_a = instance.ngOnChanges) === null || _a === void 0 ? void 0 : _a.call(instance, changes);
    }
    return instance;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnkuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL25ldGFuZWxiYXNhbC93d3cvc3BlY3RhdG9yL3Byb2plY3RzL3NwZWN0YXRvci9zcmMvIiwic291cmNlcyI6WyJsaWIvaW50ZXJuYWxzL3F1ZXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBZ0IsWUFBWSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUMxRSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFL0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxRQUFRLEVBQTJCLE1BQU0sVUFBVSxDQUFDO0FBRTdELE1BQU0sVUFBVSxXQUFXLENBQUksZ0JBQThCO0lBQzNELE9BQU8sQ0FBQyxtQkFBOEIsRUFBRSxVQUEyQixFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxFQUFPLEVBQUU7UUFDMUcsSUFBSSxtQkFBbUIsWUFBWSxXQUFXLEVBQUU7WUFDOUMsT0FBTyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFVLENBQUM7U0FDN0U7UUFFRCxNQUFNLGFBQWEsR0FBRyxnQkFBZ0IsQ0FBQyxRQUFRLENBQzdDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUMsQ0FDaEcsQ0FBQztRQUVGLElBQUksT0FBTyxDQUFDLElBQUksRUFBRTtZQUNoQixPQUFPLGFBQWEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUNyRTtRQUVELElBQUksUUFBUSxDQUFDLG1CQUFtQixDQUFDLEVBQUU7WUFDakMsT0FBTyxhQUFhLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ3hEO1FBRUQsT0FBTyxhQUFhLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO0lBQzdFLENBQUMsQ0FBQztBQUNKLENBQUM7QUFTRCxNQUFNLFVBQVUsUUFBUSxDQUFDLFFBQWEsRUFBRSxjQUFtQixFQUFFLEtBQVcsRUFBRSxjQUF1QixJQUFJOztJQUNuRyxNQUFNLE9BQU8sR0FBa0IsRUFBRSxDQUFDO0lBRWxDLE1BQU0sTUFBTSxHQUFHLENBQUMsR0FBVyxFQUFFLFFBQWEsRUFBUSxFQUFFO1FBQ2xELElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFFBQVEsRUFBRTtZQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztTQUN2RTtRQUVELFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQyxDQUFDO0lBRUYsSUFBSSxRQUFRLENBQUMsY0FBYyxDQUFDLEVBQUU7UUFDNUIsTUFBTSxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUMvQjtTQUFNO1FBQ0wsaUNBQWlDO1FBQ2pDLEtBQUssTUFBTSxDQUFDLElBQUksY0FBYyxFQUFFO1lBQzlCLE1BQU0sQ0FBQyxDQUFDLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDOUI7S0FDRjtJQUVELElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUU7UUFDL0IsOENBQThDO1FBQzlDLE1BQUEsUUFBUSxDQUFDLFdBQVcsK0NBQXBCLFFBQVEsRUFBZSxPQUFPLEVBQUU7S0FDakM7SUFFRCxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVidWdFbGVtZW50LCBTaW1wbGVDaGFuZ2UsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJ5IH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbmltcG9ydCB7IERPTVNlbGVjdG9yIH0gZnJvbSAnLi4vZG9tLXNlbGVjdG9ycyc7XG5pbXBvcnQgeyBpc1N0cmluZywgUXVlcnlPcHRpb25zLCBRdWVyeVR5cGUgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDaGlsZHJlbjxSPihkZWJ1Z0VsZW1lbnRSb290OiBEZWJ1Z0VsZW1lbnQpOiAoZGlyZWN0aXZlT3JTZWxlY3RvcjogUXVlcnlUeXBlLCBvcHRpb25zPzogUXVlcnlPcHRpb25zPFI+KSA9PiBSW10ge1xuICByZXR1cm4gKGRpcmVjdGl2ZU9yU2VsZWN0b3I6IFF1ZXJ5VHlwZSwgb3B0aW9uczogUXVlcnlPcHRpb25zPFI+ID0geyByb290OiBmYWxzZSwgcmVhZDogdW5kZWZpbmVkIH0pOiBSW10gPT4ge1xuICAgIGlmIChkaXJlY3RpdmVPclNlbGVjdG9yIGluc3RhbmNlb2YgRE9NU2VsZWN0b3IpIHtcbiAgICAgIHJldHVybiBkaXJlY3RpdmVPclNlbGVjdG9yLmV4ZWN1dGUoZGVidWdFbGVtZW50Um9vdC5uYXRpdmVFbGVtZW50KSBhcyBhbnlbXTtcbiAgICB9XG5cbiAgICBjb25zdCBkZWJ1Z0VsZW1lbnRzID0gZGVidWdFbGVtZW50Um9vdC5xdWVyeUFsbChcbiAgICAgIGlzU3RyaW5nKGRpcmVjdGl2ZU9yU2VsZWN0b3IpID8gQnkuY3NzKGRpcmVjdGl2ZU9yU2VsZWN0b3IpIDogQnkuZGlyZWN0aXZlKGRpcmVjdGl2ZU9yU2VsZWN0b3IpXG4gICAgKTtcblxuICAgIGlmIChvcHRpb25zLnJlYWQpIHtcbiAgICAgIHJldHVybiBkZWJ1Z0VsZW1lbnRzLm1hcChkZWJ1ZyA9PiBkZWJ1Zy5pbmplY3Rvci5nZXQob3B0aW9ucy5yZWFkKSk7XG4gICAgfVxuXG4gICAgaWYgKGlzU3RyaW5nKGRpcmVjdGl2ZU9yU2VsZWN0b3IpKSB7XG4gICAgICByZXR1cm4gZGVidWdFbGVtZW50cy5tYXAoZGVidWcgPT4gZGVidWcubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlYnVnRWxlbWVudHMubWFwKGRlYnVnID0+IGRlYnVnLmluamVjdG9yLmdldChkaXJlY3RpdmVPclNlbGVjdG9yKSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRQcm9wczxULCBLIGV4dGVuZHMgc3RyaW5nIHwgbnVtYmVyIHwgc3ltYm9sLCBWPihcbiAgaW5zdGFuY2U6IFQsXG4gIGtleTogSyxcbiAgdmFsdWU6IFYsXG4gIGZpcnN0Q2hhbmdlPzogYm9vbGVhblxuKTogVCAmIHsgW0tFWSBpbiBLXTogViB9O1xuZXhwb3J0IGZ1bmN0aW9uIHNldFByb3BzPFQsIEtWPihpbnN0YW5jZTogVCwga2V5VmFsdWVzPzogS1YpOiBUICYgS1Y7XG5leHBvcnQgZnVuY3Rpb24gc2V0UHJvcHMoaW5zdGFuY2U6IGFueSwga2V5T3JLZXlWYWx1ZXM6IGFueSwgdmFsdWU/OiBhbnksIGZpcnN0Q2hhbmdlOiBib29sZWFuID0gdHJ1ZSk6IGFueSB7XG4gIGNvbnN0IGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMgPSB7fTtcblxuICBjb25zdCB1cGRhdGUgPSAoa2V5OiBzdHJpbmcsIG5ld1ZhbHVlOiBhbnkpOiB2b2lkID0+IHtcbiAgICBpZiAoaW5zdGFuY2Vba2V5XSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgIGNoYW5nZXNba2V5XSA9IG5ldyBTaW1wbGVDaGFuZ2UoaW5zdGFuY2Vba2V5XSwgbmV3VmFsdWUsIGZpcnN0Q2hhbmdlKTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZVtrZXldID0gbmV3VmFsdWU7XG4gIH07XG5cbiAgaWYgKGlzU3RyaW5nKGtleU9yS2V5VmFsdWVzKSkge1xuICAgIHVwZGF0ZShrZXlPcktleVZhbHVlcywgdmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpmb3JpblxuICAgIGZvciAoY29uc3QgcCBpbiBrZXlPcktleVZhbHVlcykge1xuICAgICAgdXBkYXRlKHAsIGtleU9yS2V5VmFsdWVzW3BdKTtcbiAgICB9XG4gIH1cblxuICBpZiAoT2JqZWN0LmtleXMoY2hhbmdlcykubGVuZ3RoKSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWxpZmUtY3ljbGUtY2FsbFxuICAgIGluc3RhbmNlLm5nT25DaGFuZ2VzPy4oY2hhbmdlcyk7XG4gIH1cblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG4iXX0=