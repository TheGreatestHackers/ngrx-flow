import { isNumber, isString, isObject } from '../types';
export const parseKeyOptions = (keyOrKeyCode) => {
    if (isNumber(keyOrKeyCode) && keyOrKeyCode) {
        return { key: false, keyCode: keyOrKeyCode, modifiers: {} };
    }
    if (isString(keyOrKeyCode) && keyOrKeyCode) {
        return parseKey(keyOrKeyCode);
    }
    if (isObject(keyOrKeyCode)) {
        const parsedKey = parseKey(keyOrKeyCode.key);
        return Object.assign(Object.assign({}, parsedKey), { keyCode: keyOrKeyCode.keyCode });
    }
    throw new Error('keyboard.pressKey() requires a valid key or keyCode');
};
const parseKey = (keyStr) => {
    if (keyStr.indexOf('.') < 0 || '.' === keyStr) {
        return { key: keyStr, keyCode: false, modifiers: {} };
    }
    const keyParts = keyStr.split('.');
    const key = keyParts.pop();
    const modifiers = keyParts.reduce((mods, part) => {
        switch (part) {
            case 'control':
            case 'ctrl':
                mods.control = true;
                return mods;
            case 'shift':
                mods.shift = true;
                return mods;
            case 'alt':
                mods.alt = true;
                return mods;
            case 'meta':
            case 'cmd':
            case 'win':
                mods.meta = true;
                return mods;
            default:
                throw new Error(`invalid key modifier: ${part ? part : 'undefined'}, keyStr: ${keyStr}`);
        }
    }, { alt: false, control: false, shift: false, meta: false });
    return { key, keyCode: false, modifiers };
};
const ɵ0 = parseKey;
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5LXBhcnNlci5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbmV0YW5lbGJhc2FsL3d3dy9zcGVjdGF0b3IvcHJvamVjdHMvc3BlY3RhdG9yL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9pbnRlcm5hbHMva2V5LXBhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBd0IsUUFBUSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBZTlFLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxDQUFDLFlBQW9ELEVBQWMsRUFBRTtJQUNsRyxJQUFJLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxZQUFZLEVBQUU7UUFDMUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLENBQUM7S0FDN0Q7SUFFRCxJQUFJLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxZQUFZLEVBQUU7UUFDMUMsT0FBTyxRQUFRLENBQUMsWUFBc0IsQ0FBQyxDQUFDO0tBQ3pDO0lBRUQsSUFBSSxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUU7UUFDMUIsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU3Qyx1Q0FDSyxTQUFTLEtBQ1osT0FBTyxFQUFFLFlBQVksQ0FBQyxPQUFPLElBQzdCO0tBQ0g7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7QUFDekUsQ0FBQyxDQUFDO0FBRUYsTUFBTSxRQUFRLEdBQUcsQ0FBQyxNQUFjLEVBQWMsRUFBRTtJQUM5QyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsS0FBSyxNQUFNLEVBQUU7UUFDN0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLENBQUM7S0FDdkQ7SUFFRCxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQVksQ0FBQztJQUNyQyxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUMvQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRTtRQUNiLFFBQVEsSUFBSSxFQUFFO1lBQ1osS0FBSyxTQUFTLENBQUM7WUFDZixLQUFLLE1BQU07Z0JBQ1QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7Z0JBRXBCLE9BQU8sSUFBSSxDQUFDO1lBQ2QsS0FBSyxPQUFPO2dCQUNWLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO2dCQUVsQixPQUFPLElBQUksQ0FBQztZQUNkLEtBQUssS0FBSztnQkFDUixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztnQkFFaEIsT0FBTyxJQUFJLENBQUM7WUFDZCxLQUFLLE1BQU0sQ0FBQztZQUNaLEtBQUssS0FBSyxDQUFDO1lBQ1gsS0FBSyxLQUFLO2dCQUNSLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2dCQUVqQixPQUFPLElBQUksQ0FBQztZQUNkO2dCQUNFLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLGFBQWEsTUFBTSxFQUFFLENBQUMsQ0FBQztTQUM1RjtJQUNILENBQUMsRUFDRCxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FDMUQsQ0FBQztJQUVGLE9BQU8sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQztBQUM1QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc051bWJlciwgaXNTdHJpbmcsIEtleWJvYXJkRXZlbnRPcHRpb25zLCBpc09iamVjdCB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGludGVyZmFjZSBNb2RpZmllcktleXMge1xuICBhbHQ/OiBib29sZWFuO1xuICBjb250cm9sPzogYm9vbGVhbjtcbiAgc2hpZnQ/OiBib29sZWFuO1xuICBtZXRhPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBLZXlPcHRpb25zIHtcbiAga2V5OiBzdHJpbmcgfCBmYWxzZTtcbiAga2V5Q29kZTogbnVtYmVyIHwgZmFsc2U7XG4gIG1vZGlmaWVyczogTW9kaWZpZXJLZXlzO1xufVxuXG5leHBvcnQgY29uc3QgcGFyc2VLZXlPcHRpb25zID0gKGtleU9yS2V5Q29kZTogc3RyaW5nIHwgbnVtYmVyIHwgS2V5Ym9hcmRFdmVudE9wdGlvbnMpOiBLZXlPcHRpb25zID0+IHtcbiAgaWYgKGlzTnVtYmVyKGtleU9yS2V5Q29kZSkgJiYga2V5T3JLZXlDb2RlKSB7XG4gICAgcmV0dXJuIHsga2V5OiBmYWxzZSwga2V5Q29kZToga2V5T3JLZXlDb2RlLCBtb2RpZmllcnM6IHt9IH07XG4gIH1cblxuICBpZiAoaXNTdHJpbmcoa2V5T3JLZXlDb2RlKSAmJiBrZXlPcktleUNvZGUpIHtcbiAgICByZXR1cm4gcGFyc2VLZXkoa2V5T3JLZXlDb2RlIGFzIHN0cmluZyk7XG4gIH1cblxuICBpZiAoaXNPYmplY3Qoa2V5T3JLZXlDb2RlKSkge1xuICAgIGNvbnN0IHBhcnNlZEtleSA9IHBhcnNlS2V5KGtleU9yS2V5Q29kZS5rZXkpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnBhcnNlZEtleSxcbiAgICAgIGtleUNvZGU6IGtleU9yS2V5Q29kZS5rZXlDb2RlXG4gICAgfTtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcigna2V5Ym9hcmQucHJlc3NLZXkoKSByZXF1aXJlcyBhIHZhbGlkIGtleSBvciBrZXlDb2RlJyk7XG59O1xuXG5jb25zdCBwYXJzZUtleSA9IChrZXlTdHI6IHN0cmluZyk6IEtleU9wdGlvbnMgPT4ge1xuICBpZiAoa2V5U3RyLmluZGV4T2YoJy4nKSA8IDAgfHwgJy4nID09PSBrZXlTdHIpIHtcbiAgICByZXR1cm4geyBrZXk6IGtleVN0ciwga2V5Q29kZTogZmFsc2UsIG1vZGlmaWVyczoge30gfTtcbiAgfVxuXG4gIGNvbnN0IGtleVBhcnRzID0ga2V5U3RyLnNwbGl0KCcuJyk7XG4gIGNvbnN0IGtleSA9IGtleVBhcnRzLnBvcCgpIGFzIHN0cmluZztcbiAgY29uc3QgbW9kaWZpZXJzID0ga2V5UGFydHMucmVkdWNlKFxuICAgIChtb2RzLCBwYXJ0KSA9PiB7XG4gICAgICBzd2l0Y2ggKHBhcnQpIHtcbiAgICAgICAgY2FzZSAnY29udHJvbCc6XG4gICAgICAgIGNhc2UgJ2N0cmwnOlxuICAgICAgICAgIG1vZHMuY29udHJvbCA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbW9kcztcbiAgICAgICAgY2FzZSAnc2hpZnQnOlxuICAgICAgICAgIG1vZHMuc2hpZnQgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG1vZHM7XG4gICAgICAgIGNhc2UgJ2FsdCc6XG4gICAgICAgICAgbW9kcy5hbHQgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG1vZHM7XG4gICAgICAgIGNhc2UgJ21ldGEnOlxuICAgICAgICBjYXNlICdjbWQnOlxuICAgICAgICBjYXNlICd3aW4nOlxuICAgICAgICAgIG1vZHMubWV0YSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbW9kcztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQga2V5IG1vZGlmaWVyOiAke3BhcnQgPyBwYXJ0IDogJ3VuZGVmaW5lZCd9LCBrZXlTdHI6ICR7a2V5U3RyfWApO1xuICAgICAgfVxuICAgIH0sXG4gICAgeyBhbHQ6IGZhbHNlLCBjb250cm9sOiBmYWxzZSwgc2hpZnQ6IGZhbHNlLCBtZXRhOiBmYWxzZSB9XG4gICk7XG5cbiAgcmV0dXJuIHsga2V5LCBrZXlDb2RlOiBmYWxzZSwgbW9kaWZpZXJzIH07XG59O1xuIl19