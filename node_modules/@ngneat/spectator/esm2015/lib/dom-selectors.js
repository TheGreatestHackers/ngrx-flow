import { queries as DOMQueries, getDefaultNormalizer } from '@testing-library/dom';
export class DOMSelector {
    // Wrap selector functions in a class to make reflection easier in getChild
    constructor(execute) {
        this.execute = execute;
    }
}
export const byLabel = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByLabelText(el, matcher, options));
export const byPlaceholder = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByPlaceholderText(el, matcher, options));
export const byText = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByText(el, matcher, options));
export const byTextContent = (matcher, options) => {
    let textContentMatcher;
    const normalizer = (options === null || options === void 0 ? void 0 : options.normalizer) || getDefaultNormalizer(options);
    const getTextContent = (elem) => { var _a; return normalizer((_a = elem.textContent) !== null && _a !== void 0 ? _a : ''); };
    if (typeof matcher === 'string') {
        textContentMatcher = (_, elem) => {
            if ((options === null || options === void 0 ? void 0 : options.exact) === false) {
                return (getTextContent(elem)
                    .toLowerCase()
                    .indexOf(matcher.toLowerCase()) >= 0);
            }
            return getTextContent(elem) === matcher;
        };
    }
    else if (matcher instanceof RegExp) {
        textContentMatcher = (_, elem) => matcher.test(getTextContent(elem));
    }
    else {
        textContentMatcher = (_, elem) => matcher(getTextContent(elem), elem);
    }
    return new DOMSelector(el => DOMQueries.queryAllByText(el, textContentMatcher, options));
};
export const byAltText = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByAltText(el, matcher, options));
export const byTitle = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByTitle(el, matcher, options));
export const byTestId = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByTestId(el, matcher, options));
export const byValue = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByDisplayValue(el, matcher, options));
export const byRole = (matcher, options) => new DOMSelector(el => DOMQueries.queryAllByRole(el, matcher, options));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLXNlbGVjdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbmV0YW5lbGJhc2FsL3d3dy9zcGVjdGF0b3IvcHJvamVjdHMvc3BlY3RhdG9yL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9kb20tc2VsZWN0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFLTCxPQUFPLElBQUksVUFBVSxFQUNyQixvQkFBb0IsRUFFckIsTUFBTSxzQkFBc0IsQ0FBQztBQU05QixNQUFNLE9BQU8sV0FBVztJQUN0QiwyRUFBMkU7SUFDM0UsWUFBNEIsT0FBMkM7UUFBM0MsWUFBTyxHQUFQLE9BQU8sQ0FBb0M7SUFBRyxDQUFDO0NBQzVFO0FBSUQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUF1QixDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUM5RCxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFFOUUsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUF1QixDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUNwRSxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFFcEYsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUErQyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUNyRixJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBRXpFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLE9BQWdCLEVBQUUsT0FBeUMsRUFBZSxFQUFFO0lBQ3hHLElBQUksa0JB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cyxcbiAgTm9ybWFsaXplckZuLFxuICBTZWxlY3Rvck1hdGNoZXJPcHRpb25zLFxuICBxdWVyaWVzIGFzIERPTVF1ZXJpZXMsXG4gIGdldERlZmF1bHROb3JtYWxpemVyLFxuICBCeVJvbGVPcHRpb25zXG59IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvZG9tJztcblxuaW50ZXJmYWNlIE1hbmRhdG9yeVNlbGVjdG9yTWF0Y2hpbmdPcHRpb25zIGV4dGVuZHMgTWF0Y2hlck9wdGlvbnMge1xuICBzZWxlY3RvcjogU2VsZWN0b3JNYXRjaGVyT3B0aW9uc1snc2VsZWN0b3InXTtcbn1cblxuZXhwb3J0IGNsYXNzIERPTVNlbGVjdG9yIHtcbiAgLy8gV3JhcCBzZWxlY3RvciBmdW5jdGlvbnMgaW4gYSBjbGFzcyB0byBtYWtlIHJlZmxlY3Rpb24gZWFzaWVyIGluIGdldENoaWxkXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBleGVjdXRlOiAoZWw6IEhUTUxFbGVtZW50KSA9PiBIVE1MRWxlbWVudFtdKSB7fVxufVxuXG5leHBvcnQgdHlwZSBET01TZWxlY3RvckZhY3Rvcnk8VE9wdGlvbnMgZXh0ZW5kcyBNYXRjaGVyT3B0aW9ucyA9IE1hdGNoZXJPcHRpb25zPiA9IChtYXRjaGVyOiBNYXRjaGVyLCBvcHRpb25zPzogVE9wdGlvbnMpID0+IERPTVNlbGVjdG9yO1xuXG5leHBvcnQgY29uc3QgYnlMYWJlbDogRE9NU2VsZWN0b3JGYWN0b3J5ID0gKG1hdGNoZXIsIG9wdGlvbnMpID0+XG4gIG5ldyBET01TZWxlY3RvcihlbCA9PiBET01RdWVyaWVzLnF1ZXJ5QWxsQnlMYWJlbFRleHQoZWwsIG1hdGNoZXIsIG9wdGlvbnMpKTtcblxuZXhwb3J0IGNvbnN0IGJ5UGxhY2Vob2xkZXI6IERPTVNlbGVjdG9yRmFjdG9yeSA9IChtYXRjaGVyLCBvcHRpb25zKSA9PlxuICBuZXcgRE9NU2VsZWN0b3IoZWwgPT4gRE9NUXVlcmllcy5xdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0KGVsLCBtYXRjaGVyLCBvcHRpb25zKSk7XG5cbmV4cG9ydCBjb25zdCBieVRleHQ6IERPTVNlbGVjdG9yRmFjdG9yeTxTZWxlY3Rvck1hdGNoZXJPcHRpb25zPiA9IChtYXRjaGVyLCBvcHRpb25zKSA9PlxuICBuZXcgRE9NU2VsZWN0b3IoZWwgPT4gRE9NUXVlcmllcy5xdWVyeUFsbEJ5VGV4dChlbCwgbWF0Y2hlciwgb3B0aW9ucykpO1xuXG5leHBvcnQgY29uc3QgYnlUZXh0Q29udGVudCA9IChtYXRjaGVyOiBNYXRjaGVyLCBvcHRpb25zOiBNYW5kYXRvcnlTZWxlY3Rvck1hdGNoaW5nT3B0aW9ucyk6IERPTVNlbGVjdG9yID0+IHtcbiAgbGV0IHRleHRDb250ZW50TWF0Y2hlcjogTWF0Y2hlcjtcbiAgY29uc3Qgbm9ybWFsaXplcjogTm9ybWFsaXplckZuID0gb3B0aW9ucz8ubm9ybWFsaXplciB8fCBnZXREZWZhdWx0Tm9ybWFsaXplcihvcHRpb25zKTtcbiAgY29uc3QgZ2V0VGV4dENvbnRlbnQgPSAoZWxlbTogSFRNTEVsZW1lbnQpOiBzdHJpbmcgPT4gbm9ybWFsaXplcihlbGVtLnRleHRDb250ZW50ID8/ICcnKTtcblxuICBpZiAodHlwZW9mIG1hdGNoZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgdGV4dENvbnRlbnRNYXRjaGVyID0gKF8sIGVsZW0pID0+IHtcbiAgICAgIGlmIChvcHRpb25zPy5leGFjdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBnZXRUZXh0Q29udGVudChlbGVtKVxuICAgICAgICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgIC5pbmRleE9mKG1hdGNoZXIudG9Mb3dlckNhc2UoKSkgPj0gMFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0VGV4dENvbnRlbnQoZWxlbSkgPT09IG1hdGNoZXI7XG4gICAgfTtcbiAgfSBlbHNlIGlmIChtYXRjaGVyIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgdGV4dENvbnRlbnRNYXRjaGVyID0gKF8sIGVsZW0pID0+IG1hdGNoZXIudGVzdChnZXRUZXh0Q29udGVudChlbGVtKSk7XG4gIH0gZWxzZSB7XG4gICAgdGV4dENvbnRlbnRNYXRjaGVyID0gKF8sIGVsZW0pID0+IG1hdGNoZXIoZ2V0VGV4dENvbnRlbnQoZWxlbSksIGVsZW0pO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBET01TZWxlY3RvcihlbCA9PiBET01RdWVyaWVzLnF1ZXJ5QWxsQnlUZXh0KGVsLCB0ZXh0Q29udGVudE1hdGNoZXIsIG9wdGlvbnMpKTtcbn07XG5cbmV4cG9ydCBjb25zdCBieUFsdFRleHQ6IERPTVNlbGVjdG9yRmFjdG9yeSA9IChtYXRjaGVyLCBvcHRpb25zKSA9PlxuICBuZXcgRE9NU2VsZWN0b3IoZWwgPT4gRE9NUXVlcmllcy5xdWVyeUFsbEJ5QWx0VGV4dChlbCwgbWF0Y2hlciwgb3B0aW9ucykpO1xuXG5leHBvcnQgY29uc3QgYnlUaXRsZTogRE9NU2VsZWN0b3JGYWN0b3J5ID0gKG1hdGNoZXIsIG9wdGlvbnMpID0+IG5ldyBET01TZWxlY3RvcihlbCA9PiBET01RdWVyaWVzLnF1ZXJ5QWxsQnlUaXRsZShlbCwgbWF0Y2hlciwgb3B0aW9ucykpO1xuXG5leHBvcnQgY29uc3QgYnlUZXN0SWQ6IERPTVNlbGVjdG9yRmFjdG9yeSA9IChtYXRjaGVyLCBvcHRpb25zKSA9PiBuZXcgRE9NU2VsZWN0b3IoZWwgPT4gRE9NUXVlcmllcy5xdWVyeUFsbEJ5VGVzdElkKGVsLCBtYXRjaGVyLCBvcHRpb25zKSk7XG5cbmV4cG9ydCBjb25zdCBieVZhbHVlOiBET01TZWxlY3RvckZhY3RvcnkgPSAobWF0Y2hlciwgb3B0aW9ucykgPT5cbiAgbmV3IERPTVNlbGVjdG9yKGVsID0+IERPTVF1ZXJpZXMucXVlcnlBbGxCeURpc3BsYXlWYWx1ZShlbCwgbWF0Y2hlciwgb3B0aW9ucykpO1xuXG5leHBvcnQgY29uc3QgYnlSb2xlOiBET01TZWxlY3RvckZhY3Rvcnk8QnlSb2xlT3B0aW9ucz4gPSAobWF0Y2hlciwgb3B0aW9ucykgPT5cbiAgbmV3IERPTVNlbGVjdG9yKGVsID0+IERPTVF1ZXJpZXMucXVlcnlBbGxCeVJvbGUoZWwsIG1hdGNoZXIsIG9wdGlvbnMpKTtcbiJdfQ==