/**
 * @internal
 */
export function installProtoMethods(mock, proto, createSpyFn) {
    if (proto === null || proto === Object.prototype) {
        return;
    }
    for (const key of Object.getOwnPropertyNames(proto)) {
        const descriptor = Object.getOwnPropertyDescriptor(proto, key);
        if (!descriptor) {
            continue;
        }
        if (typeof descriptor.value === 'function' && key !== 'constructor' && typeof mock[key] === 'undefined') {
            mock[key] = createSpyFn(key);
        }
        else if (descriptor.get && !mock.hasOwnProperty(key)) {
            Object.defineProperty(mock, key, {
                set: value => (mock[`_${key}`] = value),
                get: () => mock[`_${key}`],
                configurable: true
            });
        }
    }
    installProtoMethods(mock, Object.getPrototypeOf(proto), createSpyFn);
    mock.castToWritable = () => mock;
}
/**
 * @publicApi
 */
export function createSpyObject(type, template) {
    const mock = Object.assign({}, template) || {};
    installProtoMethods(mock, type.prototype, name => {
        const newSpy = jasmine.createSpy(name);
        newSpy.andCallFake = (fn) => newSpy.and.callFake(fn);
        newSpy.andReturn = val => newSpy.and.returnValue(val);
        newSpy.reset = () => newSpy.calls.reset();
        // revisit return null here (previously needed for rtts_assert).
        newSpy.and.returnValue(null);
        return newSpy;
    });
    return mock;
}
/**
 * @publicApi
 */
export function mockProvider(type, properties) {
    return {
        provide: type,
        useFactory: () => createSpyObject(type, properties)
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbmV0YW5lbGJhc2FsL3d3dy9zcGVjdGF0b3IvcHJvamVjdHMvc3BlY3RhdG9yL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9tb2NrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNDQTs7R0FFRztBQUNILE1BQU0sVUFBVSxtQkFBbUIsQ0FBSSxJQUFTLEVBQUUsS0FBVSxFQUFFLFdBQXFCO0lBQ2pGLElBQUksS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssTUFBTSxDQUFDLFNBQVMsRUFBRTtRQUNoRCxPQUFPO0tBQ1I7SUFFRCxLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNuRCxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRS9ELElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDZixTQUFTO1NBQ1Y7UUFFRCxJQUFJLE9BQU8sVUFBVSxDQUFDLEtBQUssS0FBSyxVQUFVLElBQUksR0FBRyxLQUFLLGFBQWEsSUFBSSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxXQUFXLEVBQUU7WUFDdkcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUM5QjthQUFNLElBQUksVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDdEQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFO2dCQUMvQixHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDO2dCQUN2QyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7Z0JBQzFCLFlBQVksRUFBRSxJQUFJO2FBQ25CLENBQUMsQ0FBQztTQUNKO0tBQ0Y7SUFFRCxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUVyRSxJQUFJLENBQUMsY0FBYyxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztBQUNuQyxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsZUFBZSxDQUFJLElBQStCLEVBQUUsUUFBd0M7SUFDMUcsTUFBTSxJQUFJLEdBQVEsa0JBQUssUUFBUSxLQUFNLEVBQUUsQ0FBQztJQUV4QyxtQkFBbUIsQ0FBSSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRTtRQUNsRCxNQUFNLE1BQU0sR0FBeUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3RSxNQUFNLENBQUMsV0FBVyxHQUFHLENBQUMsRUFBMkIsRUFBRSxFQUFFLENBQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkYsTUFBTSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RELE1BQU0sQ0FBQyxLQUFLLEdBQUcsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUMxQyxnRUFBZ0U7UUFDaEUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFN0IsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxZQUFZLENBQUksSUFBK0IsRUFBRSxVQUEwQztJQUN6RyxPQUFPO1FBQ0wsT0FBTyxFQUFFLElBQUk7UUFDYixVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUM7S0FDcEQsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQ3JlZGl0OiBWYWxlbnRpbiBCdXJ5YWtvdiAqL1xuaW1wb3J0IHsgRmFjdG9yeVByb3ZpZGVyLCBUeXBlLCBBYnN0cmFjdFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxudHlwZSBXcml0YWJsZTxUPiA9IHsgLXJlYWRvbmx5IFtQIGluIGtleW9mIFRdOiBUW1BdIH07XG5cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbXBhdGlibGVTcHkgZXh0ZW5kcyBqYXNtaW5lLlNweSB7XG4gIC8qKlxuICAgKiBCeSBjaGFpbmluZyB0aGUgc3B5IHdpdGggYW5kLnJldHVyblZhbHVlLCBhbGwgY2FsbHMgdG8gdGhlIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGEgc3BlY2lmaWNcbiAgICogdmFsdWUuXG4gICAqL1xuICBhbmRSZXR1cm4odmFsOiBhbnkpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBCeSBjaGFpbmluZyB0aGUgc3B5IHdpdGggYW5kLmNhbGxGYWtlLCBhbGwgY2FsbHMgdG8gdGhlIHNweSB3aWxsIGRlbGVnYXRlIHRvIHRoZSBzdXBwbGllZFxuICAgKiBmdW5jdGlvbi5cbiAgICovXG4gIGFuZENhbGxGYWtlKGZuOiBGdW5jdGlvbik6IHRoaXM7XG5cbiAgLyoqXG4gICAqIHJlbW92ZXMgYWxsIHJlY29yZGVkIGNhbGxzXG4gICAqL1xuICByZXNldCgpOiB2b2lkO1xufVxuXG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IHR5cGUgU3B5T2JqZWN0PFQ+ID0gVCAmXG4gIHsgW1AgaW4ga2V5b2YgVF06IFRbUF0gZXh0ZW5kcyBGdW5jdGlvbiA/IFRbUF0gJiBDb21wYXRpYmxlU3B5IDogVFtQXSB9ICYge1xuICAgIC8qKlxuICAgICAqIENhc3RzIHRvIHR5cGUgd2l0aG91dCByZWFkb25seSBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgY2FzdFRvV3JpdGFibGUoKTogV3JpdGFibGU8VD47XG4gIH07XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnN0YWxsUHJvdG9NZXRob2RzPFQ+KG1vY2s6IGFueSwgcHJvdG86IGFueSwgY3JlYXRlU3B5Rm46IEZ1bmN0aW9uKTogdm9pZCB7XG4gIGlmIChwcm90byA9PT0gbnVsbCB8fCBwcm90byA9PT0gT2JqZWN0LnByb3RvdHlwZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHByb3RvKSkge1xuICAgIGNvbnN0IGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3RvLCBrZXkpO1xuXG4gICAgaWYgKCFkZXNjcmlwdG9yKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGRlc2NyaXB0b3IudmFsdWUgPT09ICdmdW5jdGlvbicgJiYga2V5ICE9PSAnY29uc3RydWN0b3InICYmIHR5cGVvZiBtb2NrW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBtb2NrW2tleV0gPSBjcmVhdGVTcHlGbihrZXkpO1xuICAgIH0gZWxzZSBpZiAoZGVzY3JpcHRvci5nZXQgJiYgIW1vY2suaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vY2ssIGtleSwge1xuICAgICAgICBzZXQ6IHZhbHVlID0+IChtb2NrW2BfJHtrZXl9YF0gPSB2YWx1ZSksXG4gICAgICAgIGdldDogKCkgPT4gbW9ja1tgXyR7a2V5fWBdLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGluc3RhbGxQcm90b01ldGhvZHMobW9jaywgT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSwgY3JlYXRlU3B5Rm4pO1xuXG4gIG1vY2suY2FzdFRvV3JpdGFibGUgPSAoKSA9PiBtb2NrO1xufVxuXG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNweU9iamVjdDxUPih0eXBlOiBUeXBlPFQ+IHwgQWJzdHJhY3RUeXBlPFQ+LCB0ZW1wbGF0ZT86IFBhcnRpYWw8UmVjb3JkPGtleW9mIFQsIGFueT4+KTogU3B5T2JqZWN0PFQ+IHtcbiAgY29uc3QgbW9jazogYW55ID0geyAuLi50ZW1wbGF0ZSB9IHx8IHt9O1xuXG4gIGluc3RhbGxQcm90b01ldGhvZHM8VD4obW9jaywgdHlwZS5wcm90b3R5cGUsIG5hbWUgPT4ge1xuICAgIGNvbnN0IG5ld1NweTogamFzbWluZS5TcHkgJiBQYXJ0aWFsPENvbXBhdGlibGVTcHk+ID0gamFzbWluZS5jcmVhdGVTcHkobmFtZSk7XG4gICAgbmV3U3B5LmFuZENhbGxGYWtlID0gKGZuOiAoLi4uYXJnczogYW55W10pID0+IGFueSkgPT4gPGFueT5uZXdTcHkuYW5kLmNhbGxGYWtlKGZuKTtcbiAgICBuZXdTcHkuYW5kUmV0dXJuID0gdmFsID0+IG5ld1NweS5hbmQucmV0dXJuVmFsdWUodmFsKTtcbiAgICBuZXdTcHkucmVzZXQgPSAoKSA9PiBuZXdTcHkuY2FsbHMucmVzZXQoKTtcbiAgICAvLyByZXZpc2l0IHJldHVybiBudWxsIGhlcmUgKHByZXZpb3VzbHkgbmVlZGVkIGZvciBydHRzX2Fzc2VydCkuXG4gICAgbmV3U3B5LmFuZC5yZXR1cm5WYWx1ZShudWxsKTtcblxuICAgIHJldHVybiBuZXdTcHk7XG4gIH0pO1xuXG4gIHJldHVybiBtb2NrO1xufVxuXG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1vY2tQcm92aWRlcjxUPih0eXBlOiBUeXBlPFQ+IHwgQWJzdHJhY3RUeXBlPFQ+LCBwcm9wZXJ0aWVzPzogUGFydGlhbDxSZWNvcmQ8a2V5b2YgVCwgYW55Pj4pOiBGYWN0b3J5UHJvdmlkZXIge1xuICByZXR1cm4ge1xuICAgIHByb3ZpZGU6IHR5cGUsXG4gICAgdXNlRmFjdG9yeTogKCkgPT4gY3JlYXRlU3B5T2JqZWN0KHR5cGUsIHByb3BlcnRpZXMpXG4gIH07XG59XG5cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgdHlwZSBNb2NrUHJvdmlkZXIgPSB0eXBlb2YgbW9ja1Byb3ZpZGVyO1xuIl19