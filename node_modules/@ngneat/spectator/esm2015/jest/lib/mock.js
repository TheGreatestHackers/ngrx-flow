import { installProtoMethods } from '@ngneat/spectator';
/**
 * @publicApi
 */
export function createSpyObject(type, template) {
    const mock = Object.assign({}, template) || {};
    installProtoMethods(mock, type.prototype, () => {
        const jestFn = jest.fn();
        const newSpy = jestFn;
        newSpy.andCallFake = (fn) => {
            jestFn.mockImplementation(fn);
            return newSpy;
        };
        newSpy.andReturn = (val) => {
            jestFn.mockReturnValue(val);
        };
        newSpy.reset = () => {
            jestFn.mockReset();
        };
        return newSpy;
    });
    return mock;
}
/**
 * @publicApi
 */
export function mockProvider(type, properties) {
    return {
        provide: type,
        useFactory: () => createSpyObject(type, properties)
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbmV0YW5lbGJhc2FsL3d3dy9zcGVjdGF0b3IvcHJvamVjdHMvc3BlY3RhdG9yL2plc3Qvc3JjLyIsInNvdXJjZXMiOlsibGliL21vY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLG1CQUFtQixFQUE2QyxNQUFNLG1CQUFtQixDQUFDO0FBSW5HOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBSSxJQUErQixFQUFFLFFBQXdDO0lBQzFHLE1BQU0sSUFBSSxHQUFRLGtCQUFLLFFBQVEsS0FBTSxFQUFFLENBQUM7SUFFeEMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO1FBQzdDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUN6QixNQUFNLE1BQU0sR0FBa0IsTUFBYSxDQUFDO1FBRTVDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsQ0FBQyxFQUFZLEVBQUUsRUFBRTtZQUNwQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsRUFBNkIsQ0FBQyxDQUFDO1lBRXpELE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUMsQ0FBQztRQUVGLE1BQU0sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxHQUFRLEVBQUUsRUFBRTtZQUM5QixNQUFNLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQztRQUVGLE1BQU0sQ0FBQyxLQUFLLEdBQUcsR0FBRyxFQUFFO1lBQ2xCLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNyQixDQUFDLENBQUM7UUFFRixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLFlBQVksQ0FBSSxJQUErQixFQUFFLFVBQTBDO0lBQ3pHLE9BQU87UUFDTCxPQUFPLEVBQUUsSUFBSTtRQUNiLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQztLQUNwRCxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZhY3RvcnlQcm92aWRlciwgQWJzdHJhY3RUeXBlLCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpbnN0YWxsUHJvdG9NZXRob2RzLCBDb21wYXRpYmxlU3B5LCBTcHlPYmplY3QgYXMgQmFzZVNweU9iamVjdCB9IGZyb20gJ0BuZ25lYXQvc3BlY3RhdG9yJztcblxuZXhwb3J0IHR5cGUgU3B5T2JqZWN0PFQ+ID0gQmFzZVNweU9iamVjdDxUPiAmIHsgW1AgaW4ga2V5b2YgVF06IFRbUF0gJiAoVFtQXSBleHRlbmRzICguLi5hcmdzOiBhbnlbXSkgPT4gaW5mZXIgUiA/IGplc3QuTW9jazxSPiA6IFRbUF0pIH07XG5cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3B5T2JqZWN0PFQ+KHR5cGU6IFR5cGU8VD4gfCBBYnN0cmFjdFR5cGU8VD4sIHRlbXBsYXRlPzogUGFydGlhbDxSZWNvcmQ8a2V5b2YgVCwgYW55Pj4pOiBTcHlPYmplY3Q8VD4ge1xuICBjb25zdCBtb2NrOiBhbnkgPSB7IC4uLnRlbXBsYXRlIH0gfHwge307XG5cbiAgaW5zdGFsbFByb3RvTWV0aG9kcyhtb2NrLCB0eXBlLnByb3RvdHlwZSwgKCkgPT4ge1xuICAgIGNvbnN0IGplc3RGbiA9IGplc3QuZm4oKTtcbiAgICBjb25zdCBuZXdTcHk6IENvbXBhdGlibGVTcHkgPSBqZXN0Rm4gYXMgYW55O1xuXG4gICAgbmV3U3B5LmFuZENhbGxGYWtlID0gKGZuOiBGdW5jdGlvbikgPT4ge1xuICAgICAgamVzdEZuLm1vY2tJbXBsZW1lbnRhdGlvbihmbiBhcyAoLi4uYXJnczogYW55W10pID0+IGFueSk7XG5cbiAgICAgIHJldHVybiBuZXdTcHk7XG4gICAgfTtcblxuICAgIG5ld1NweS5hbmRSZXR1cm4gPSAodmFsOiBhbnkpID0+IHtcbiAgICAgIGplc3RGbi5tb2NrUmV0dXJuVmFsdWUodmFsKTtcbiAgICB9O1xuXG4gICAgbmV3U3B5LnJlc2V0ID0gKCkgPT4ge1xuICAgICAgamVzdEZuLm1vY2tSZXNldCgpO1xuICAgIH07XG5cbiAgICByZXR1cm4gbmV3U3B5O1xuICB9KTtcblxuICByZXR1cm4gbW9jaztcbn1cblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtb2NrUHJvdmlkZXI8VD4odHlwZTogVHlwZTxUPiB8IEFic3RyYWN0VHlwZTxUPiwgcHJvcGVydGllcz86IFBhcnRpYWw8UmVjb3JkPGtleW9mIFQsIGFueT4+KTogRmFjdG9yeVByb3ZpZGVyIHtcbiAgcmV0dXJuIHtcbiAgICBwcm92aWRlOiB0eXBlLFxuICAgIHVzZUZhY3Rvcnk6ICgpID0+IGNyZWF0ZVNweU9iamVjdCh0eXBlLCBwcm9wZXJ0aWVzKVxuICB9O1xufVxuIl19