import { createDirectiveFactory as baseCreateDirectiveFactory, isType, SpectatorDirective as BaseSpectatorDirective } from '@ngneat/spectator';
import { mockProvider } from './mock';
/**
 * @publicApi
 */
export class SpectatorDirective extends BaseSpectatorDirective {
    inject(token, fromComponentInjector = false) {
        return super.inject(token, fromComponentInjector);
    }
}
export function createDirectiveFactory(typeOrOptions) {
    return baseCreateDirectiveFactory(Object.assign({ mockProvider }, (isType(typeOrOptions) ? { directive: typeOrOptions } : typeOrOptions)));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlY3RhdG9yLWRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbmV0YW5lbGJhc2FsL3d3dy9zcGVjdGF0b3IvcHJvamVjdHMvc3BlY3RhdG9yL2plc3Qvc3JjLyIsInNvdXJjZXMiOlsibGliL3NwZWN0YXRvci1kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUNMLHNCQUFzQixJQUFJLDBCQUEwQixFQUNwRCxNQUFNLEVBRU4sa0JBQWtCLElBQUksc0JBQXNCLEVBSTdDLE1BQU0sbUJBQW1CLENBQUM7QUFFM0IsT0FBTyxFQUFFLFlBQVksRUFBYSxNQUFNLFFBQVEsQ0FBQztBQUVqRDs7R0FFRztBQUNILE1BQU0sT0FBTyxrQkFBeUMsU0FBUSxzQkFBNEI7SUFDakYsTUFBTSxDQUFJLEtBQWUsRUFBRSx3QkFBaUMsS0FBSztRQUN0RSxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLHFCQUFxQixDQUFpQixDQUFDO0lBQ3BFLENBQUM7Q0FDRjtBQThCRCxNQUFNLFVBQVUsc0JBQXNCLENBQ3BDLGFBQXdEO0lBRXhELE9BQU8sMEJBQTBCLGlCQUMvQixZQUFZLElBQ1QsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsRUFDdEMsQ0FBQztBQUN4QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgY3JlYXRlRGlyZWN0aXZlRmFjdG9yeSBhcyBiYXNlQ3JlYXRlRGlyZWN0aXZlRmFjdG9yeSxcbiAgaXNUeXBlLFxuICBIb3N0Q29tcG9uZW50LFxuICBTcGVjdGF0b3JEaXJlY3RpdmUgYXMgQmFzZVNwZWN0YXRvckRpcmVjdGl2ZSxcbiAgU3BlY3RhdG9yRGlyZWN0aXZlT3B0aW9ucyxcbiAgU3BlY3RhdG9yRGlyZWN0aXZlT3ZlcnJpZGVzLFxuICBUb2tlblxufSBmcm9tICdAbmduZWF0L3NwZWN0YXRvcic7XG5cbmltcG9ydCB7IG1vY2tQcm92aWRlciwgU3B5T2JqZWN0IH0gZnJvbSAnLi9tb2NrJztcblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBjbGFzcyBTcGVjdGF0b3JEaXJlY3RpdmU8RCwgSCA9IEhvc3RDb21wb25lbnQ+IGV4dGVuZHMgQmFzZVNwZWN0YXRvckRpcmVjdGl2ZTxELCBIPiB7XG4gIHB1YmxpYyBpbmplY3Q8VD4odG9rZW46IFRva2VuPFQ+LCBmcm9tQ29tcG9uZW50SW5qZWN0b3I6IGJvb2xlYW4gPSBmYWxzZSk6IFNweU9iamVjdDxUPiB7XG4gICAgcmV0dXJuIHN1cGVyLmluamVjdCh0b2tlbiwgZnJvbUNvbXBvbmVudEluamVjdG9yKSBhcyBTcHlPYmplY3Q8VD47XG4gIH1cbn1cblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCB0eXBlIFNwZWN0YXRvckRpcmVjdGl2ZUZhY3Rvcnk8RCwgSCA9IEhvc3RDb21wb25lbnQ+ID0gPEhQPihcbiAgdGVtcGxhdGU6IHN0cmluZyxcbiAgb3ZlcnJpZGVzPzogU3BlY3RhdG9yRGlyZWN0aXZlT3ZlcnJpZGVzPEQsIEgsIEhQPlxuKSA9PiBTcGVjdGF0b3JEaXJlY3RpdmU8RCwgSCAmIEhvc3RDb21wb25lbnQgZXh0ZW5kcyBIID8gSFAgOiB1bmtub3duPjtcblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCB0eXBlIFByZXNldFNwZWN0YXRvckRpcmVjdGl2ZUZhY3Rvcnk8RCwgSD4gPSA8SFA+KFxuICB0ZW1wbGF0ZT86IHN0cmluZyxcbiAgb3ZlcnJpZGVzPzogU3BlY3RhdG9yRGlyZWN0aXZlT3ZlcnJpZGVzPEQsIEgsIEhQPlxuKSA9PiBTcGVjdGF0b3JEaXJlY3RpdmU8RCwgSCAmIEhvc3RDb21wb25lbnQgZXh0ZW5kcyBIID8gSFAgOiB1bmtub3duPjtcblxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaXJlY3RpdmVGYWN0b3J5PEQsIEggPSBIb3N0Q29tcG9uZW50PihcbiAgb3B0aW9uczogU3BlY3RhdG9yRGlyZWN0aXZlT3B0aW9uczxELCBIPiAmIHsgdGVtcGxhdGU6IHN0cmluZyB9XG4pOiBQcmVzZXRTcGVjdGF0b3JEaXJlY3RpdmVGYWN0b3J5PEQsIEg+O1xuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaXJlY3RpdmVGYWN0b3J5PEQsIEggPSBIb3N0Q29tcG9uZW50PihcbiAgdHlwZU9yT3B0aW9uczogVHlwZTxEPiB8IFNwZWN0YXRvckRpcmVjdGl2ZU9wdGlvbnM8RCwgSD5cbik6IFNwZWN0YXRvckRpcmVjdGl2ZUZhY3Rvcnk8RCwgSD47XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRGlyZWN0aXZlRmFjdG9yeTxELCBIID0gSG9zdENvbXBvbmVudD4oXG4gIHR5cGVPck9wdGlvbnM6IFR5cGU8RD4gfCBTcGVjdGF0b3JEaXJlY3RpdmVPcHRpb25zPEQsIEg+XG4pOiBTcGVjdGF0b3JEaXJlY3RpdmVGYWN0b3J5PEQsIEg+IHtcbiAgcmV0dXJuIGJhc2VDcmVhdGVEaXJlY3RpdmVGYWN0b3J5KHtcbiAgICBtb2NrUHJvdmlkZXIsXG4gICAgLi4uKGlzVHlwZSh0eXBlT3JPcHRpb25zKSA/IHsgZGlyZWN0aXZlOiB0eXBlT3JPcHRpb25zIH0gOiB0eXBlT3JPcHRpb25zKVxuICB9KSBhcyBTcGVjdGF0b3JEaXJlY3RpdmVGYWN0b3J5PEQsIEg+O1xufVxuIl19