"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const architect_1 = require("@angular-devkit/architect");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const path_1 = require("path");
const os_1 = require("os");
const fs_1 = require("fs");
const build_dev_1 = require("@storybook/core/dist/server/build-dev");
const root_1 = require("../../utils/root");
try {
    require('dotenv').config();
}
catch (e) { }
exports.default = architect_1.createBuilder(run);
/**
 * @whatItDoes This is the starting point of the builder.
 * @param builderConfig
 */
function run(options, context) {
    const frameworkPath = `${options.uiFramework}/dist/server/options`;
    return rxjs_1.from(Promise.resolve().then(() => require(frameworkPath))).pipe(operators_1.map((m) => m.default), operators_1.switchMap((frameworkOptions) => rxjs_1.from(storybookOptionMapper(options, frameworkOptions, context))), operators_1.switchMap((option) => runInstance(option)), operators_1.map((loaded) => {
        const builder = { success: true };
        return builder;
    }));
}
function runInstance(options) {
    return new rxjs_1.Observable((obs) => {
        build_dev_1.buildDevStandalone(Object.assign(Object.assign({}, options), { ci: true }))
            .then((sucess) => obs.next(sucess))
            .catch((err) => obs.error(err));
    });
}
function storybookOptionMapper(builderOptions, frameworkOptions, context) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const storybookConfig = yield findOrCreateConfig(builderOptions.config, context);
        const optionsWithFramework = Object.assign(Object.assign(Object.assign(Object.assign({}, builderOptions), { mode: 'dev', configDir: storybookConfig }), frameworkOptions), { frameworkPresets: [...(frameworkOptions.frameworkPresets || [])] });
        optionsWithFramework.config;
        return optionsWithFramework;
    });
}
function findOrCreateConfig(config, context) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const sourceRoot = yield root_1.getRoot(context);
        if (config.configFolder && fs_1.statSync(config.configFolder).isDirectory()) {
            return config.configFolder;
        }
        else if (fs_1.statSync(config.configPath).isFile() &&
            fs_1.statSync(config.pluginPath).isFile() &&
            fs_1.statSync(config.srcRoot).isFile()) {
            return createStorybookConfig(config.configPath, config.pluginPath, config.srcRoot);
        }
        else if (fs_1.statSync(path_1.join(context.workspaceRoot, sourceRoot, '.storybook')).isDirectory()) {
            return path_1.join(context.workspaceRoot, sourceRoot, '.storybook');
        }
        throw new Error('No configuration settings');
    });
}
function createStorybookConfig(configPath, pluginPath, srcRoot) {
    const tmpDir = os_1.tmpdir();
    const tmpFolder = `${tmpDir}${path_1.sep}`;
    fs_1.mkdtempSync(tmpFolder);
    fs_1.copyFileSync(configPath, `${tmpFolder}/${path_1.basename(configPath)}`, fs_1.constants.COPYFILE_EXCL);
    fs_1.copyFileSync(pluginPath, `${tmpFolder}/${path_1.basename(pluginPath)}`, fs_1.constants.COPYFILE_EXCL);
    fs_1.copyFileSync(srcRoot, `${tmpFolder}/${path_1.basename(srcRoot)}`, fs_1.constants.COPYFILE_EXCL);
    return tmpFolder;
}
//# sourceMappingURL=storybook.impl.js.map