"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addCacheableOperation = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@nrwl/workspace");
const versions_1 = require("../../utils/versions");
const utils_1 = require("../../utils/utils");
function checkDependenciesInstalled(schema) {
    return (host, context) => {
        const packageJson = workspace_1.readJsonInTree(host, 'package.json');
        const devDependencies = {};
        const dependencies = {};
        // base deps
        devDependencies['@nrwl/storybook'] = versions_1.nxVersion;
        devDependencies['@types/webpack'] = versions_1.webpackTypesVersion;
        /**
         * If Storybook already exists, do NOT update it to the latest version.
         * Leave it alone.
         */
        if (!packageJson.dependencies['@storybook/addon-knobs'] &&
            !packageJson.devDependencies['@storybook/addon-knobs']) {
            devDependencies['@storybook/addon-knobs'] = versions_1.storybookVersion;
        }
        if (utils_1.isFramework('angular', schema)) {
            if (!packageJson.dependencies['@storybook/angular'] &&
                !packageJson.devDependencies['@storybook/angular']) {
                devDependencies['@storybook/angular'] = versions_1.storybookVersion;
            }
            if (!packageJson.dependencies['@angular/forms'] &&
                !packageJson.devDependencies['@angular/forms']) {
                devDependencies['@angular/forms'] = '*';
            }
        }
        if (utils_1.isFramework('react', schema)) {
            devDependencies['@storybook/react'] = versions_1.storybookVersion;
            devDependencies['@svgr/webpack'] = versions_1.svgrVersion;
            devDependencies['url-loader'] = versions_1.urlLoaderVersion;
            devDependencies['babel-loader'] = versions_1.babelLoaderVersion;
            devDependencies['@babel/core'] = versions_1.babelCoreVersion;
            devDependencies['@babel/preset-typescript'] = versions_1.babelPresetTypescriptVersion;
            if (!packageJson.dependencies['@storybook/react'] &&
                !packageJson.devDependencies['@storybook/react']) {
                devDependencies['@storybook/react'] = versions_1.storybookVersion;
            }
        }
        if (utils_1.isFramework('html', schema)) {
            devDependencies['@storybook/html'] = versions_1.storybookVersion;
        }
        return workspace_1.addDepsToPackageJson(dependencies, devDependencies);
    };
}
exports.addCacheableOperation = workspace_1.updateJsonInTree('nx.json', (nxJson) => {
    if (!nxJson.tasksRunnerOptions ||
        !nxJson.tasksRunnerOptions.default ||
        nxJson.tasksRunnerOptions.default.runner !==
            '@nrwl/workspace/tasks-runners/default') {
        return nxJson;
    }
    nxJson.tasksRunnerOptions.default.options =
        nxJson.tasksRunnerOptions.default.options || {};
    nxJson.tasksRunnerOptions.default.options.cacheableOperations =
        nxJson.tasksRunnerOptions.default.options.cacheableOperations || [];
    if (!nxJson.tasksRunnerOptions.default.options.cacheableOperations.includes('build-storybook')) {
        nxJson.tasksRunnerOptions.default.options.cacheableOperations.push('build-storybook');
    }
    return nxJson;
});
const moveToDevDependencies = workspace_1.updateJsonInTree('package.json', (packageJson) => {
    packageJson.dependencies = packageJson.dependencies || {};
    packageJson.devDependencies = packageJson.devDependencies || {};
    if (packageJson.dependencies['@nrwl/storybook']) {
        packageJson.devDependencies['@nrwl/storybook'] =
            packageJson.dependencies['@nrwl/storybook'];
        delete packageJson.dependencies['@nrwl/storybook'];
    }
    return packageJson;
});
function default_1(schema) {
    return schematics_1.chain([
        checkDependenciesInstalled(schema),
        moveToDevDependencies,
        exports.addCacheableOperation,
    ]);
}
exports.default = default_1;
//# sourceMappingURL=init.js.map