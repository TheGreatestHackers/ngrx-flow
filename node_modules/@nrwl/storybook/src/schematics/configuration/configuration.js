"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configurationGenerator = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@nrwl/workspace");
const core_1 = require("@angular-devkit/core");
const utils_1 = require("../../utils/utils");
const to_js_1 = require("@nrwl/workspace/src/utils/rules/to-js");
const file_utils_1 = require("@nrwl/workspace/src/core/file-utils");
const versions_1 = require("../../utils/versions");
const project_type_1 = require("@nrwl/workspace/src/utils/project-type");
const devkit_1 = require("@nrwl/devkit");
const ngcli_adapter_1 = require("@nrwl/devkit/ngcli-adapter");
function default_1(rawSchema) {
    const schema = normalizeSchema(rawSchema);
    const workspaceStorybookVersion = readCurrentWorkspaceStorybookVersion();
    return (tree, context) => {
        const { projectType } = workspace_1.getProjectConfig(tree, schema.name);
        return schematics_1.chain([
            schematics_1.schematic('ng-add', {
                uiFramework: schema.uiFramework,
            }),
            createRootStorybookDir(schema.name, schema.js, workspaceStorybookVersion),
            createProjectStorybookDir(schema.name, schema.uiFramework, schema.js, workspaceStorybookVersion),
            configureTsProjectConfig(schema),
            configureTsSolutionConfig(schema),
            updateLintConfig(schema),
            addStorybookTask(schema.name, schema.uiFramework),
            schema.configureCypress && projectType !== 'application'
                ? schematics_1.schematic('cypress-project', {
                    name: schema.name,
                    js: schema.js,
                    linter: schema.linter,
                })
                : () => {
                    context.logger.warn('There is already an e2e project setup');
                },
        ]);
    };
}
exports.default = default_1;
function normalizeSchema(schema) {
    const defaults = {
        linter: "tslint" /* TsLint */,
        js: false,
    };
    return Object.assign(Object.assign({}, defaults), schema);
}
function createRootStorybookDir(projectName, js, workspaceStorybookVersion) {
    return (tree, context) => {
        const { projectType } = workspace_1.getProjectConfig(tree, projectName);
        const projectDirectory = project_type_1.projectDir(projectType);
        context.logger.debug(`adding .storybook folder to ${projectDirectory} -\n
  based on the Storybook version installed: ${workspaceStorybookVersion}, we'll bootstrap a scaffold for that particular version.`);
        return schematics_1.chain([
            utils_1.applyWithSkipExisting(schematics_1.url(workspaceStorybookVersion === '6' ? './root-files' : './root-files-5'), [js ? to_js_1.toJS() : schematics_1.noop()]),
        ])(tree, context);
    };
}
function createProjectStorybookDir(projectName, uiFramework, js, workspaceStorybookVersion) {
    return (tree, context) => {
        /**
         * Here, same as above
         * Check storybook version
         * and use the correct folder
         * lib-files-5 or lib-files-6
         */
        const projectConfig = workspace_1.getProjectConfig(tree, projectName);
        const { projectType } = workspace_1.getProjectConfig(tree, projectName);
        const projectDirectory = project_type_1.projectDir(projectType);
        context.logger.debug(`adding .storybook folder to ${projectDirectory} - using Storybook version ${workspaceStorybookVersion}`);
        return schematics_1.chain([
            utils_1.applyWithSkipExisting(schematics_1.url(workspaceStorybookVersion === '6'
                ? './project-files'
                : './project-files-5'), [
                schematics_1.template({
                    tmpl: '',
                    uiFramework,
                    offsetFromRoot: devkit_1.offsetFromRoot(projectConfig.root),
                    projectType: projectDirectory,
                }),
                schematics_1.move(projectConfig.root),
                js ? to_js_1.toJS() : schematics_1.noop(),
            ]),
        ])(tree, context);
    };
}
function getTsConfigPath(tree, projectName, path) {
    const { projectType } = workspace_1.getProjectConfig(tree, projectName);
    const projectPath = workspace_1.getProjectConfig(tree, projectName).root;
    return core_1.join(projectPath, path && path.length > 0
        ? path
        : projectType === 'application'
            ? 'tsconfig.app.json'
            : 'tsconfig.lib.json');
}
function configureTsProjectConfig(schema) {
    const { name: projectName } = schema;
    return (tree) => {
        let tsConfigPath;
        let tsConfigContent;
        try {
            tsConfigPath = getTsConfigPath(tree, projectName);
            tsConfigContent = utils_1.getTsConfigContent(tree, tsConfigPath);
        }
        catch (_a) {
            /**
             * Custom app configurations
             * may contain a tsconfig.json
             * instead of a tsconfig.app.json.
             */
            tsConfigPath = getTsConfigPath(tree, projectName, 'tsconfig.json');
            tsConfigContent = utils_1.getTsConfigContent(tree, tsConfigPath);
        }
        tsConfigContent.exclude = [
            ...(tsConfigContent.exclude || []),
            '**/*.stories.ts',
            '**/*.stories.js',
            ...(utils_1.isFramework('react', schema)
                ? ['**/*.stories.jsx', '**/*.stories.tsx']
                : []),
        ];
        tree.overwrite(tsConfigPath, workspace_1.serializeJson(tsConfigContent));
        return tree;
    };
}
function configureTsSolutionConfig(schema) {
    const { name: projectName } = schema;
    return (tree) => {
        const projectPath = workspace_1.getProjectConfig(tree, projectName).root;
        const tsConfigPath = projectPath + '/tsconfig.json';
        const tsConfigContent = utils_1.getTsConfigContent(tree, tsConfigPath);
        tsConfigContent.references = [
            ...(tsConfigContent.references || []),
            {
                path: './.storybook/tsconfig.json',
            },
        ];
        tree.overwrite(tsConfigPath, workspace_1.serializeJson(tsConfigContent));
        return tree;
    };
}
/**
 * When adding storybook we need to inform TSLint or ESLint
 * of the additional tsconfig.json file which will be the only tsconfig
 * which includes *.stories files.
 *
 * For TSLint this is done via the builder config, for ESLint this is
 * done within the .eslintrc.json file.
 */
function updateLintConfig(schema) {
    const { name: projectName } = schema;
    return schematics_1.chain([
        workspace_1.updateWorkspaceInTree((json) => {
            var _a, _b;
            const projectConfig = json.projects[projectName];
            const isUsingTSLint = ((_b = (_a = projectConfig.architect) === null || _a === void 0 ? void 0 : _a.lint) === null || _b === void 0 ? void 0 : _b.builder) ===
                '@angular-devkit/build-angular:tslint';
            if (isUsingTSLint) {
                projectConfig.architect.lint.options.tsConfig = [
                    ...projectConfig.architect.lint.options.tsConfig,
                    `${projectConfig.root}/.storybook/tsconfig.json`,
                ];
            }
            return json;
        }),
        (tree) => {
            var _a, _b, _c, _d, _e, _f, _g;
            const projectConfig = workspace_1.getProjectConfig(tree, projectName);
            const isUsingESLint = (((_b = (_a = projectConfig.architect) === null || _a === void 0 ? void 0 : _a.lint) === null || _b === void 0 ? void 0 : _b.builder) === '@nrwl/linter:lint' &&
                ((_e = (_d = (_c = projectConfig.architect) === null || _c === void 0 ? void 0 : _c.lint) === null || _d === void 0 ? void 0 : _d.options) === null || _e === void 0 ? void 0 : _e.linter) === 'eslint') ||
                ((_g = (_f = projectConfig.architect) === null || _f === void 0 ? void 0 : _f.lint) === null || _g === void 0 ? void 0 : _g.builder) === '@nrwl/linter:eslint';
            if (!isUsingESLint) {
                return;
            }
            return workspace_1.updateJsonInTree(`${projectConfig.root}/.eslintrc.json`, (json) => {
                var _a, _b, _c, _d;
                if (typeof ((_a = json.parserOptions) === null || _a === void 0 ? void 0 : _a.project) === 'string') {
                    json.parserOptions.project = [json.parserOptions.project];
                }
                if (Array.isArray((_b = json.parserOptions) === null || _b === void 0 ? void 0 : _b.project)) {
                    json.parserOptions.project.push(`${projectConfig.root}/.storybook/tsconfig.json`);
                }
                const overrides = json.overrides || [];
                for (const override of overrides) {
                    if (typeof ((_c = override.parserOptions) === null || _c === void 0 ? void 0 : _c.project) === 'string') {
                        override.parserOptions.project = [override.parserOptions.project];
                    }
                    if (Array.isArray((_d = override.parserOptions) === null || _d === void 0 ? void 0 : _d.project)) {
                        override.parserOptions.project.push(`${projectConfig.root}/.storybook/tsconfig.json`);
                    }
                }
                return json;
            });
        },
    ]);
}
function addStorybookTask(projectName, uiFramework) {
    return workspace_1.updateWorkspace((workspace) => {
        const projectConfig = workspace.projects.get(projectName);
        if (!projectConfig) {
            return;
        }
        projectConfig.targets.set('storybook', {
            builder: '@nrwl/storybook:storybook',
            options: {
                uiFramework,
                port: 4400,
                config: {
                    configFolder: `${projectConfig.root}/.storybook`,
                },
            },
            configurations: {
                ci: {
                    quiet: true,
                },
            },
        });
        projectConfig.targets.set('build-storybook', {
            builder: '@nrwl/storybook:build',
            outputs: ['{options.outputPath}'],
            options: {
                uiFramework,
                outputPath: core_1.join(core_1.normalize('dist'), core_1.normalize('storybook'), projectName),
                config: {
                    configFolder: `${projectConfig.root}/.storybook`,
                },
            },
            configurations: {
                ci: {
                    quiet: true,
                },
            },
        });
    });
}
function readCurrentWorkspaceStorybookVersion() {
    const packageJsonContents = file_utils_1.readPackageJson();
    let workspaceStorybookVersion = versions_1.storybookVersion;
    if (packageJsonContents && packageJsonContents['devDependencies']) {
        if (packageJsonContents['devDependencies']['@storybook/angular']) {
            workspaceStorybookVersion =
                packageJsonContents['devDependencies']['@storybook/angular'];
        }
        if (packageJsonContents['devDependencies']['@storybook/react']) {
            workspaceStorybookVersion =
                packageJsonContents['devDependencies']['@storybook/react'];
        }
        if (packageJsonContents['devDependencies']['@storybook/core']) {
            workspaceStorybookVersion =
                packageJsonContents['devDependencies']['@storybook/core'];
        }
    }
    if (packageJsonContents && packageJsonContents['dependencies']) {
        if (packageJsonContents['dependencies']['@storybook/angular']) {
            workspaceStorybookVersion =
                packageJsonContents['dependencies']['@storybook/angular'];
        }
        if (packageJsonContents['dependencies']['@storybook/react']) {
            workspaceStorybookVersion =
                packageJsonContents['dependencies']['@storybook/react'];
        }
        if (packageJsonContents['dependencies']['@storybook/core']) {
            workspaceStorybookVersion =
                packageJsonContents['dependencies']['@storybook/core'];
        }
    }
    if (workspaceStorybookVersion.startsWith('6') ||
        workspaceStorybookVersion.startsWith('^6')) {
        workspaceStorybookVersion = '6';
    }
    return workspaceStorybookVersion;
}
exports.configurationGenerator = ngcli_adapter_1.wrapAngularDevkitSchematic('@nrwl/storybook', 'configuration');
//# sourceMappingURL=configuration.js.map