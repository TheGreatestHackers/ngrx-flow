"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cypressProjectGenerator = void 0;
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@nrwl/workspace");
const utils_1 = require("../../utils/utils");
const ngcli_adapter_1 = require("@nrwl/devkit/ngcli-adapter");
function default_1(schema) {
    const e2eProjectName = schema.name + '-e2e';
    return schematics_1.chain([
        schematics_1.externalSchematic('@nrwl/cypress', 'cypress-project', {
            name: e2eProjectName,
            project: schema.name,
            js: schema.js,
            linter: schema.linter,
        }),
        removeUnneededFiles(e2eProjectName, schema.js),
        addBaseUrlToCypressConfig(e2eProjectName),
        updateAngularJsonBuilder(e2eProjectName, schema.name),
    ]);
}
exports.default = default_1;
function removeUnneededFiles(projectName, js) {
    return (tree, context) => {
        utils_1.safeFileDelete(tree, workspace_1.getProjectConfig(tree, projectName).sourceRoot +
            (js ? '/integration/app.spec.js' : '/integration/app.spec.ts'));
        utils_1.safeFileDelete(tree, workspace_1.getProjectConfig(tree, projectName).sourceRoot +
            (js ? '/support/app.po.js' : '/support/app.po.ts'));
        return tree;
    };
}
function addBaseUrlToCypressConfig(projectName) {
    return (tree, context) => {
        const cypressConfigPath = workspace_1.getProjectConfig(tree, projectName).root + '/cypress.json';
        const cypressConfig = utils_1.parseJsonAtPath(tree, cypressConfigPath);
        let cypressConfigContent;
        if (cypressConfig && cypressConfig.value) {
            cypressConfigContent = cypressConfig.value;
        }
        else {
            return tree;
        }
        cypressConfigContent.baseUrl = 'http://localhost:4400';
        return tree.overwrite(cypressConfigPath, JSON.stringify(cypressConfigContent, null, 2) + '\n');
    };
}
function updateAngularJsonBuilder(e2eProjectName, targetProjectName) {
    return workspace_1.updateWorkspaceInTree((workspace) => {
        const project = workspace.projects[e2eProjectName];
        const e2eTarget = project.architect['e2e'];
        project.architect['e2e'] = Object.assign(Object.assign({}, e2eTarget), { options: Object.assign(Object.assign({}, e2eTarget.options), { devServerTarget: `${targetProjectName}:storybook` }), configurations: {
                ci: {
                    devServerTarget: `${targetProjectName}:storybook:ci`,
                },
            } });
        return workspace;
    });
}
exports.cypressProjectGenerator = ngcli_adapter_1.wrapAngularDevkitSchematic('@nrwl/storybook', 'cypress-project');
//# sourceMappingURL=cypress-project.js.map