import { JsonAstObject } from '@angular-devkit/core';
import { Tree, Source, Rule } from '@angular-devkit/schematics';
import { SourceFile, CompilerOptions } from 'typescript';
export interface NodePackage {
    name: string;
    version: string;
}
export declare const Constants: {
    addonDependencies: string[];
    tsConfigExclusions: string[];
    pkgJsonScripts: {
        storybook: string;
    };
    jsonIndentLevel: number;
    coreAddonPrefix: string;
    uiFrameworks: {
        readonly angular: "@storybook/angular";
        readonly react: "@storybook/react";
        readonly html: "@storybook/html";
    };
};
declare type Constants = typeof Constants;
declare type Framework = {
    type: keyof Constants['uiFrameworks'];
    uiFramework: Constants['uiFrameworks'][keyof Constants['uiFrameworks']];
};
export declare function isFramework(type: Framework['type'], schema: Pick<Framework, 'uiFramework'>): boolean;
export declare function safeFileDelete(tree: Tree, path: string): boolean;
/**
 * Attempt to retrieve the latest package version from NPM
 * Return an optional "latest" version in case of error
 * @param packageName
 */
export declare function getLatestNodeVersion(packageName: string): Promise<NodePackage>;
export declare function getJsonFile(tree: Tree, path: string): JsonAstObject;
export declare function parseJsonAtPath(tree: Tree, path: string): JsonAstObject;
export declare type TsConfig = {
    extends: string;
    compilerOptions: CompilerOptions;
    include?: string[];
    exclude?: string[];
    references?: Array<{
        path: string;
    }>;
};
export declare function getTsConfigContent(tree: Tree, path: string): TsConfig;
export declare function getTsSourceFile(host: Tree, path: string): SourceFile;
export declare function applyWithOverwrite(source: Source, rules: Rule[]): Rule;
export declare function applyWithSkipExisting(source: Source, rules: Rule[]): Rule;
export {};
