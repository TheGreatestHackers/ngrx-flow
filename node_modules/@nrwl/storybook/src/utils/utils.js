"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyWithSkipExisting = exports.applyWithOverwrite = exports.getTsSourceFile = exports.getTsConfigContent = exports.parseJsonAtPath = exports.getJsonFile = exports.getLatestNodeVersion = exports.safeFileDelete = exports.isFramework = exports.Constants = void 0;
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
const http_1 = require("http");
const typescript_1 = require("typescript");
exports.Constants = {
    addonDependencies: ['@storybook/addons'],
    tsConfigExclusions: ['stories', '**/*.stories.ts'],
    pkgJsonScripts: {
        storybook: 'start-storybook -p 9001 -c .storybook',
    },
    jsonIndentLevel: 2,
    coreAddonPrefix: '@storybook/addon-',
    uiFrameworks: {
        angular: '@storybook/angular',
        react: '@storybook/react',
        html: '@storybook/html',
    },
};
function isFramework(type, schema) {
    if (type === 'angular' && schema.uiFramework === '@storybook/angular') {
        return true;
    }
    if (type === 'react' && schema.uiFramework === '@storybook/react') {
        return true;
    }
    if (type === 'html' && schema.uiFramework === '@storybook/html') {
        return true;
    }
    return false;
}
exports.isFramework = isFramework;
function safeFileDelete(tree, path) {
    if (tree.exists(path)) {
        tree.delete(path);
        return true;
    }
    else {
        return false;
    }
}
exports.safeFileDelete = safeFileDelete;
/**
 * Attempt to retrieve the latest package version from NPM
 * Return an optional "latest" version in case of error
 * @param packageName
 */
function getLatestNodeVersion(packageName) {
    const DEFAULT_VERSION = 'latest';
    return new Promise((resolve) => {
        return http_1.get(`http://registry.npmjs.org/${packageName}`, (res) => {
            let rawData = '';
            res.on('data', (chunk) => (rawData += chunk));
            res.on('end', () => {
                try {
                    const response = JSON.parse(rawData);
                    const version = (response && response['dist-tags']) || {};
                    resolve(buildPackage(packageName, version.latest));
                }
                catch (e) {
                    resolve(buildPackage(packageName));
                }
            });
        }).on('error', () => resolve(buildPackage(packageName)));
    });
    function buildPackage(name, version = DEFAULT_VERSION) {
        return { name, version };
    }
}
exports.getLatestNodeVersion = getLatestNodeVersion;
function getJsonFile(tree, path) {
    const buffer = tree.read(path);
    if (buffer === null) {
        throw new schematics_1.SchematicsException(`Could not read JSON file (${path}).`);
    }
    const content = buffer.toString();
    const packageJson = core_1.parseJsonAst(content, core_1.JsonParseMode.Strict);
    if (packageJson.kind !== 'object') {
        throw new schematics_1.SchematicsException('Invalid JSON file. Was expecting an object');
    }
    return packageJson;
}
exports.getJsonFile = getJsonFile;
function parseJsonAtPath(tree, path) {
    const buffer = tree.read(path);
    if (buffer === null) {
        throw new schematics_1.SchematicsException(`Could not read ${path}.`);
    }
    const content = buffer.toString();
    const json = core_1.parseJsonAst(content, core_1.JsonParseMode.Strict);
    if (json.kind !== 'object') {
        throw new schematics_1.SchematicsException(`Invalid ${path}. Was expecting an object`);
    }
    return json;
}
exports.parseJsonAtPath = parseJsonAtPath;
function getTsConfigContent(tree, path) {
    const tsConfig = parseJsonAtPath(tree, path);
    const content = tsConfig.value;
    return content;
}
exports.getTsConfigContent = getTsConfigContent;
function getTsSourceFile(host, path) {
    const buffer = host.read(path);
    if (!buffer) {
        throw new schematics_1.SchematicsException(`Could not read TS file (${path}).`);
    }
    const content = buffer.toString();
    const source = typescript_1.createSourceFile(path, content, typescript_1.ScriptTarget.Latest, true);
    return source;
}
exports.getTsSourceFile = getTsSourceFile;
function applyWithOverwrite(source, rules) {
    return (tree, _context) => {
        const rule = schematics_1.mergeWith(schematics_1.apply(source, [
            ...rules,
            schematics_1.forEach((fileEntry) => {
                if (tree.exists(fileEntry.path)) {
                    tree.overwrite(fileEntry.path, fileEntry.content);
                    return null;
                }
                return fileEntry;
            }),
        ]));
        return rule(tree, _context);
    };
}
exports.applyWithOverwrite = applyWithOverwrite;
function applyWithSkipExisting(source, rules) {
    return (tree, _context) => {
        const rule = schematics_1.mergeWith(schematics_1.apply(source, [
            ...rules,
            schematics_1.forEach((fileEntry) => {
                if (tree.exists(fileEntry.path)) {
                    return null;
                }
                return fileEntry;
            }),
        ]));
        return rule(tree, _context);
    };
}
exports.applyWithSkipExisting = applyWithSkipExisting;
//# sourceMappingURL=utils.js.map